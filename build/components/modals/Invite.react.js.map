{"version":3,"sources":["../../../src/components/modals/Invite.react.js"],"names":["InviteUser","getStores","calculateState","contacts","getState","group","users","props","context","handleClose","bind","onSearchChange","onContactSelect","onInviteUrlByClick","hide","uid","inviteUser","state","id","show","INVITE","event","setState","search","target","value","getContacts","filter","contact","score","name","renderContacts","length","map","isMember","currentState","SUCCESS","PENDING","onClick","console","log","contactClassName","renderSearch","intl","messages","inviteByLinkButton","render","contextTypes","object","create"],"mappings":"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","file":"Invite.react.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport React, { Component, PropTypes } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { Container } from 'flux/utils';\r\nimport fuzzaldrin from 'fuzzaldrin';\r\nimport classNames from 'classnames';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { AsyncActionStates, ModalTypes } from '../../constants/ActorAppConstants';\r\nimport { hasMember } from '../../utils/GroupUtils';\r\n\r\nimport InviteUserActions from '../../actions/InviteUserActions';\r\nimport InviteUserByLinkActions from '../../actions/InviteUserByLinkActions';\r\n\r\nimport PeopleStore from '../../stores/PeopleStore';\r\nimport InviteUserStore from '../../stores/InviteUserStore';\r\n\r\nimport ContactItem from '../common/ContactItem.react';\r\nimport Stateful from '../common/Stateful.react';\r\n\r\nclass InviteUser extends Component {\r\n  static getStores() {\r\n    return [InviteUserStore, PeopleStore];\r\n  }\r\n\r\n  static calculateState() {\r\n    return {\r\n      contacts: PeopleStore.getState(),\r\n      group: InviteUserStore.getState().group,\r\n      users: InviteUserStore.getState().users\r\n    };\r\n  }\r\n\r\n  static contextTypes = {\r\n    intl: PropTypes.object\r\n  }\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.onSearchChange = this.onSearchChange.bind(this);\r\n    this.onContactSelect = this.onContactSelect.bind(this);\r\n    this.onInviteUrlByClick = this.onInviteUrlByClick.bind(this);\r\n  }\r\n\r\n  handleClose() {\r\n    InviteUserActions.hide();\r\n  }\r\n\r\n  onContactSelect(uid) {\r\n    InviteUserActions.inviteUser(this.state.group.id, uid);\r\n  }\r\n\r\n  onInviteUrlByClick() {\r\n    const { group } = this.state;\r\n\r\n    InviteUserByLinkActions.show(group, ModalTypes.INVITE);\r\n  }\r\n\r\n  onSearchChange(event) {\r\n    this.setState({ search: event.target.value });\r\n  }\r\n\r\n  getContacts() {\r\n    const { contacts, search } = this.state;\r\n    if (!search) return contacts;\r\n\r\n    return contacts.filter((contact) => {\r\n      return fuzzaldrin.score(contact.name, search) > 0;\r\n    });\r\n  }\r\n\r\n  renderContacts() {\r\n    const { group, users } = this.state;\r\n    const contacts = this.getContacts();\r\n\r\n    if (!contacts.length) {\r\n      return (\r\n        <li className=\"contacts__list__item contacts__list__item--empty text-center\">\r\n          <FormattedMessage id=\"invite.notFound\"/>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return contacts.map((contact) => {\r\n\r\n      const isMember = hasMember(group.id, contact.uid);\r\n      const currentState = isMember ? AsyncActionStates.SUCCESS : (users[contact.uid] || AsyncActionStates.PENDING);\r\n\r\n      const onClick = () => {\r\n        console.log(`%c Trying to invite \"${contact.name}\"(uid=${contact.uid}) to group ${group.id}`, 'color: #fd5c52');\r\n        this.onContactSelect(contact.uid)\r\n      };\r\n\r\n      const contactClassName = classNames({\r\n        'contact--disabled': currentState === AsyncActionStates.SUCCESS\r\n      });\r\n\r\n      return (\r\n        <ContactItem {...contact} className={contactClassName} key={contact.uid}>\r\n          <Stateful\r\n            currentState={currentState}\r\n            pending={<a className=\"material-icons\" onClick={onClick}>person_add</a>}\r\n            processing={<i className=\"material-icons spin\">autorenew</i>}\r\n            success={<i className=\"material-icons\">check</i>}\r\n            failure={<i className=\"material-icons\">warning</i>}\r\n          />\r\n        </ContactItem>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderSearch() {\r\n    const { search } = this.state;\r\n    const { intl } = this.context;\r\n\r\n    return (\r\n      <div className=\"small-search\">\r\n        <i className=\"material-icons\">search</i>\r\n        <input className=\"input\"\r\n               onChange={this.onSearchChange}\r\n               ref=\"search\"\r\n               placeholder={intl.messages['invite.search']}\r\n               type=\"search\"\r\n               value={search}/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  inviteByLinkButton() {\r\n    return (\r\n      <a className=\"link link--blue\" onClick={this.onInviteUrlByClick}>\r\n        <i className=\"material-icons\">link</i>\r\n        <FormattedMessage id=\"invite.inviteByLink\"/>\r\n      </a>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        overlayClassName=\"modal-overlay\"\r\n        className=\"modal\"\r\n        onRequestClose={this.handleClose}\r\n        isOpen>\r\n\r\n        <div className=\"invite\">\r\n          <div className=\"modal__content\">\r\n\r\n            <header className=\"modal__header\">\r\n              <i className=\"modal__header__icon material-icons\">person_add</i>\r\n              <FormattedMessage id=\"invite.title\" tagName=\"h1\"/>\r\n              <button className=\"button button--lightblue\" onClick={this.handleClose}>\r\n                <FormattedMessage id=\"button.done\"/>\r\n              </button>\r\n            </header>\r\n\r\n            <div className=\"modal__body\">\r\n              {this.renderSearch()}\r\n\r\n              {this.inviteByLinkButton()}\r\n\r\n              <ul className=\"contacts__list\">\r\n                {this.renderContacts()}\r\n              </ul>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container.create(InviteUser);\r\n"]}