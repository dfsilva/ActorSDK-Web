{"version":3,"sources":["../../../src/components/common/ConnectionState.react.js"],"names":["ConnectionState","props","SharedActor","get","appName","getStores","calculateState","connectionState","getState","render","state","className","ONLINE","CONNECTING","UPDATING","create","pure"],"mappings":";;;;AAIA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;+eAXA;;;;IAaMA,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAGjB,QAAMC,cAAc,0BAAgBC,GAAhB,EAApB;AACA,UAAKC,OAAL,GAAeF,YAAYE,OAAZ,GAAsBF,YAAYE,OAAlC,6BAAf;AAJiB;AAKlB;;kBAEMC,S,wBAAY;AACjB,WAAO,gCAAP;AACD,G;;kBAEMC,c,6BAAiB;AACtB,WAAO;AACLC,uBAAiB,+BAAqBC,QAArB;AADZ,KAAP;AAGD,G;;4BAEDC,M,qBAAS;AAAA,QACCF,eADD,GACqB,KAAKG,KAD1B,CACCH,eADD;;;AAGP,QAAMI,YAAY,0BAAW,kBAAX,EAA+B;AAC/C,kCAA4BJ,oBAAoB,oCAAiBK,MADlB;AAE/C,sCAAgCL,oBAAoB,oCAAiBM;AAFtB,KAA/B,CAAlB;;AAKA,WACE;AAAA;AAAA,QAAK,WAAWF,SAAhB;AAEIJ,0BAAoB,oCAAiBO,QAArC,GACI,6DAAkB,yBAAuBP,eAAzC,EAA4D,QAAQ,EAAEH,SAAS,KAAKA,OAAhB,EAApE,GADJ,GAEI;AAJR,KADF;AASD,G;;;;;kBAGY,iBAAUW,MAAV,CAAiBf,eAAjB,EAAkC,EAAEgB,MAAM,KAAR,EAAlC,C","file":"ConnectionState.react.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Container } from 'flux/utils';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport SharedContainer from '../../utils/SharedContainer';\r\nimport { appName, ConnectionStates } from '../../constants/ActorAppConstants';\r\nimport classnames from 'classnames';\r\n\r\nimport ConnectionStateStore from '../../stores/ConnectionStateStore';\r\n\r\nclass ConnectionState extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const SharedActor = SharedContainer.get();\r\n    this.appName = SharedActor.appName ? SharedActor.appName : appName;\r\n  }\r\n\r\n  static getStores() {\r\n    return [ConnectionStateStore];\r\n  }\r\n\r\n  static calculateState() {\r\n    return {\r\n      connectionState: ConnectionStateStore.getState()\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { connectionState } = this.state;\r\n\r\n    const className = classnames('connection-state', {\r\n      'connection-state--online': connectionState === ConnectionStates.ONLINE,\r\n      'connection-state--connection': connectionState === ConnectionStates.CONNECTING\r\n    });\r\n\r\n    return (\r\n      <div className={className}>\r\n        {\r\n          connectionState !== ConnectionStates.UPDATING\r\n            ? <FormattedMessage id={`connectionState.${connectionState}`} values={{ appName: this.appName }}/>\r\n            : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container.create(ConnectionState, { pure: false });\r\n"]}