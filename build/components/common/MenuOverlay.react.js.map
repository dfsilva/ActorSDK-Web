{"version":3,"sources":["../../../src/components/common/MenuOverlay.react.js"],"names":["MenuOverlay","getStores","calculateState","message","getMessage","isMessageDropdownOpen","rid","isRecentContextOpen","targetRect","getTargetRect","contextPos","getContextPos","contextPeer","getPeer","props","render","state","currentPeer","getCurrentPeer","menuOverlayClassName","create","pure"],"mappings":";;;;AAIA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;+eAZA;;;;IAcMA,W;;;cACGC,S,wBAAY;AACjB,WAAO,gDAAP;AACD,G;;cAEMC,c,6BAAiB;AACtB,QAAMC,UAAU,wBAAcC,UAAd,EAAhB;;AAEA,WAAO;AACLC,6BAAuB,wBAAcA,qBAAd,CAAoCF,QAAQG,GAA5C,CADlB;AAELC,2BAAqB,wBAAcA,mBAAd,EAFhB;AAGLC,kBAAY,wBAAcC,aAAd,EAHP;AAILC,kBAAY,wBAAcC,aAAd,EAJP;AAKLC,mBAAa,wBAAcC,OAAd,EALR;AAMLV;AANK,KAAP;AAQD,G;;AAED,uBAAYW,KAAZ,EAAmB;AAAA;;AAAA,4CACjB,sBAAMA,KAAN,CADiB;AAElB;;wBAEDC,M,qBAAS;AAAA,iBAC8F,KAAKC,KADnG;AAAA,QACCX,qBADD,UACCA,qBADD;AAAA,QACwBE,mBADxB,UACwBA,mBADxB;AAAA,QAC6CJ,OAD7C,UAC6CA,OAD7C;AAAA,QACsDK,UADtD,UACsDA,UADtD;AAAA,QACkEI,WADlE,UACkEA,WADlE;AAAA,QAC+EF,UAD/E,UAC+EA,UAD/E;;AAEP,QAAMO,cAAc,sBAAYC,cAAZ,EAApB;;AAEA,QAAMC,uBAAuB,0BAAW,cAAX,EAA2B;AACtD,8BAAwBd,yBAAyBE;AADK,KAA3B,CAA7B;;AAIA,WACE;AAAA;AAAA,QAAK,WAAWY,oBAAhB;AAEId,8BACI,0DAAgB,SAASF,OAAzB;AACgB,oBAAYK,UAD5B;AAEgB,cAAMS,WAFtB;AAGgB,0BAHhB,GADJ,GAKI,IAPR;AAUIV,4BACI,6DAAmB,MAAMK,WAAzB;AACmB,oBAAYF,UAD/B;AAEmB,0BAFnB,GADJ,GAII;AAdR,KADF;AAmBD,G;;;;;kBAGY,iBAAUU,MAAV,CAAiBpB,WAAjB,EAA8B,EAAEqB,MAAM,KAAR,EAA9B,C","file":"MenuOverlay.react.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport { Container } from 'flux/utils';\r\nimport classnames from 'classnames';\r\n\r\nimport MessageActions from './dropdown/MessageActions.react';\r\nimport RecentContextMenu from './dropdown/RecentContextMenu.react'\r\n\r\nimport DropdownStore from '../../stores/DropdownStore';\r\nimport DialogStore from '../../stores/DialogStore';\r\n\r\nclass MenuOverlay extends Component {\r\n  static getStores() {\r\n    return [DropdownStore, DialogStore];\r\n  }\r\n\r\n  static calculateState() {\r\n    const message = DropdownStore.getMessage();\r\n\r\n    return {\r\n      isMessageDropdownOpen: DropdownStore.isMessageDropdownOpen(message.rid),\r\n      isRecentContextOpen: DropdownStore.isRecentContextOpen(),\r\n      targetRect: DropdownStore.getTargetRect(),\r\n      contextPos: DropdownStore.getContextPos(),\r\n      contextPeer: DropdownStore.getPeer(),\r\n      message\r\n    };\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { isMessageDropdownOpen, isRecentContextOpen, message, targetRect, contextPeer, contextPos } = this.state;\r\n    const currentPeer = DialogStore.getCurrentPeer();\r\n\r\n    const menuOverlayClassName = classnames('menu-overlay', {\r\n      'menu-overlay--opened': isMessageDropdownOpen || isRecentContextOpen\r\n    });\r\n\r\n    return (\r\n      <div className={menuOverlayClassName}>\r\n        {\r\n          isMessageDropdownOpen\r\n            ? <MessageActions message={message}\r\n                              targetRect={targetRect}\r\n                              peer={currentPeer}\r\n                              hideOnScroll/>\r\n            : null\r\n        }\r\n        {\r\n          isRecentContextOpen\r\n            ? <RecentContextMenu peer={contextPeer}\r\n                                 contextPos={contextPos}\r\n                                 hideOnScroll/>\r\n            : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container.create(MenuOverlay, { pure: false });\r\n"]}