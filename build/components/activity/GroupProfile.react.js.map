{"version":3,"sources":["../../../src/components/activity/GroupProfile.react.js"],"names":["GroupProfile","getStores","calculateState","prevState","nextProps","gid","group","id","peer","getGroupPeer","notificationEnabled","isNotificationsEnabled","integrationToken","getToken","message","getMessage","props","handleNotificationChange","bind","handleTokenSelect","handleAvatarClick","event","state","changeNotificationsEnabled","target","checked","select","open","bigAvatar","renderMainInfo","admin","getUser","adminId","placeholder","name","__html","renderAbout","about","replace","renderToken","myId","getMyId","renderGroupPre","render","isMember","iconElement","members","propTypes","object","isRequired","create","withProps","pure"],"mappings":"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","file":"GroupProfile.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { lightbox } from '../../utils/ImageUtils';\nimport { Container } from 'flux/utils';\nimport Scrollbar from '../common/Scrollbar.react';\n\nimport { escapeWithEmoji } from '../../utils/EmojiUtils'\n\nimport NotificationsActionCreators from '../../actions/NotificationsActionCreators';\n\nimport DialogStore from '../../stores/DialogStore';\nimport NotificationsStore from '../../stores/NotificationsStore';\nimport GroupStore from '../../stores/GroupStore';\nimport PeerStore from '../../stores/PeerStore';\nimport UserStore from '../../stores/UserStore';\nimport OnlineStore from '../../stores/OnlineStore';\n\nimport SvgIcon from '../common/SvgIcon.react';\nimport AvatarItem from '../common/AvatarItem.react';\nimport GroupProfileMembers from '../activity/GroupProfileMembers.react';\nimport GroupPreProperties from '../activity/GroupPreProperties.react';\nimport Fold from '../common/Fold.react';\nimport ToggleNotifications from '../common/ToggleNotifications.react';\n\nclass GroupProfile extends Component {\n  static propTypes = {\n    group: PropTypes.object.isRequired\n  };\n\n  static getStores() {\n    return [NotificationsStore, GroupStore, OnlineStore];\n  }\n\n  static calculateState(prevState, nextProps) {\n    const gid = nextProps.group.id;\n    const peer = gid ? PeerStore.getGroupPeer(gid) : null;\n    const notificationEnabled = NotificationsStore.isNotificationsEnabled(peer);\n    return {\n      peer,\n      isNotificationsEnabled: peer ? notificationEnabled : true,\n      integrationToken: GroupStore.getToken(),\n      message: OnlineStore.getMessage()\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleNotificationChange = this.handleNotificationChange.bind(this);\n    this.handleTokenSelect = this.handleTokenSelect.bind(this);\n    this.handleAvatarClick = this.handleAvatarClick.bind(this);\n  }\n\n  handleNotificationChange(event) {\n    const { peer } = this.state;\n    NotificationsActionCreators.changeNotificationsEnabled(peer, event.target.checked);\n  }\n\n  handleTokenSelect(event) {\n    event.target.select();\n  }\n\n  handleAvatarClick() {\n    lightbox.open(this.props.group.bigAvatar);\n  }\n\n  renderMainInfo() {\n    const { group } = this.props;\n    const admin = UserStore.getUser(group.adminId);\n\n    return (\n      <header>\n        <AvatarItem\n          className=\"profile__avatar\"\n          size=\"large\"\n          image={group.bigAvatar}\n          placeholder={group.placeholder}\n          title={group.name}\n          onClick={this.handleAvatarClick}\n        />\n\n        <h3\n          className=\"group_profile__meta__title\"\n          dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.name) }}\n        />\n\n        <div className=\"group_profile__meta__created\">\n          <FormattedMessage id=\"createdBy\"/>\n          &nbsp;\n          <span dangerouslySetInnerHTML={{ __html: escapeWithEmoji(admin.name) }}/>\n        </div>\n      </header>\n    );\n  }\n\n  renderAbout() {\n    const { group: { about } } = this.props;\n\n    if (!about) {\n      return null;\n    }\n\n    return (\n      <div\n        className=\"group_profile__meta__description\"\n        dangerouslySetInnerHTML={{ __html: escapeWithEmoji(about).replace(/\\n/g, '<br/>') }}\n      />\n    );\n  }\n\n  renderToken() {\n    const { group: { adminId } } = this.props;\n    const { integrationToken } = this.state;\n    const myId = UserStore.getMyId();\n\n    if (adminId !== myId) {\n      return null;\n    }\n\n    return (\n      <li className=\"profile__list__item group_profile__integration no-p\">\n        <Fold icon=\"power\" iconClassName=\"icon--pink\" title={<FormattedMessage id=\"integrationToken\"/>}>\n\n          <div className=\"info info--light\">\n            <p><FormattedMessage id=\"integrationTokenHint\"/></p>\n            <a href=\"https://actor.readme.io/docs/simple-integration\" target=\"_blank\"><FormattedMessage id=\"integrationTokenHelp\"/></a>\n          </div>\n\n          <textarea\n            className=\"textarea\"\n            onClick={this.handleTokenSelect}\n            readOnly\n            rows=\"3\"\n            value={integrationToken}/>\n        </Fold>\n      </li>\n    );\n  }\n\n    renderGroupPre() {\n        const { group } = this.props;\n\n        return (\n            <li className=\"profile__list__item group_profile__integration no-p\">\n              <Fold icon=\"power\" iconClassName=\"icon--pink\" title=\"Criar Grupo Pre\">\n\n                <div className=\"info info--light\">\n                  <p><FormattedMessage id=\"integrationTokenHint\"/></p>\n                  <a href=\"https://actor.readme.io/docs/simple-integration\" target=\"_blank\"><FormattedMessage id=\"integrationTokenHelp\"/></a>\n                </div>\n\n                <textarea\n                    className=\"textarea\"\n                    onClick={this.handleTokenSelect}\n                    readOnly\n                    rows=\"3\"\n                    value={integrationToken}/>\n              </Fold>\n            </li>\n        );\n    }\n\n  render() {\n    const { group } = this.props;\n    const { isNotificationsEnabled, message } = this.state;\n    const isMember = DialogStore.isMember();\n\n    const iconElement = (\n      <SvgIcon className=\"icon icon--green\" glyph=\"members\" />\n    );\n\n    if (!isMember) {\n      return (\n        <div className=\"activity__body group_profile\">\n          <ul className=\"profile__list\">\n            <li className=\"profile__list__item group_profile__meta\">\n              {this.renderMainInfo()}\n              {this.renderAbout()}\n            </li>\n          </ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"activity__body group_profile\">\n        <Scrollbar>\n          <ul className=\"profile__list\">\n            <li className=\"profile__list__item group_profile__meta\">\n              {this.renderMainInfo()}\n              {this.renderAbout()}\n            </li>\n\n            <li className=\"profile__list__item group_profile__notifications no-p\">\n              <ToggleNotifications\n                  isNotificationsEnabled={isNotificationsEnabled}\n                                   onNotificationChange={this.handleNotificationChange}/>\n            </li>\n\n            <li className=\"profile__list__item group_profile__members no-p\">\n              <Fold iconElement={iconElement} title={message}>\n                <GroupProfileMembers groupId={group.id} members={group.members}/>\n              </Fold>\n            </li>\n\n            <li className=\"profile__list__item group_profile__group_pre no-p\">\n                <GroupPreProperties groupId={group.id} groups={[]}/>\n            </li>\n            {this.renderToken()}\n          </ul>\n        </Scrollbar>\n      </div>\n    );\n  }\n}\n\nexport default Container.create(GroupProfile, { withProps: true, pure: false });\n"]}