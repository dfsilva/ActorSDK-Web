{"version":3,"sources":["../../../src/components/activity/GroupProfile.react.js"],"names":["GroupProfile","getStores","calculateState","prevState","nextProps","gid","group","id","peer","getGroupPeer","notificationEnabled","isNotificationsEnabled","integrationToken","getToken","message","getMessage","groupPermissions","getGroupPermissions","props","handleNotificationChange","bind","handleTokenSelect","handleAvatarClick","handleGroupPermissionsFoldChange","handleShowAdminsToMembersChange","handleCanMembersInviteChange","handleCanMembersEditGroupInfoChange","handleCanAdminsEditGroupInfoChange","handleShowJoinLeaveMessagesChange","handlerSavePermissions","event","state","changeNotificationsEnabled","target","checked","select","open","bigAvatar","foldState","loadGroupPermissions","setState","showAdminsToMembers","canMembersInvite","canMembersEditGroupInfo","canAdminsEditGroupInfo","showJoinLeaveMessages","savePermissions","renderMainInfo","admin","getUser","ownerId","placeholder","name","__html","renderAbout","about","replace","renderToken","myId","getMyId","renderGroupPermissions","isCanEditAdministration","renderGroupPre","render","isMember","iconElement","members","propTypes","object","isRequired","create","withProps","pure"],"mappings":"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","file":"GroupProfile.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { lightbox } from '../../utils/ImageUtils';\nimport { Container } from 'flux/utils';\nimport Scrollbar from '../common/Scrollbar.react';\nimport TextField from '../common/TextField.react';\n\nimport { escapeWithEmoji } from '../../utils/EmojiUtils'\n\nimport NotificationsActionCreators from '../../actions/NotificationsActionCreators';\n\nimport DialogStore from '../../stores/DialogStore';\nimport NotificationsStore from '../../stores/NotificationsStore';\nimport GroupStore from '../../stores/GroupStore';\nimport PeerStore from '../../stores/PeerStore';\nimport UserStore from '../../stores/UserStore';\nimport OnlineStore from '../../stores/OnlineStore';\n\nimport SvgIcon from '../common/SvgIcon.react';\nimport AvatarItem from '../common/AvatarItem.react';\nimport GroupProfileMembers from '../activity/GroupProfileMembers.react';\nimport GroupPreProperties from '../activity/GroupPreProperties.react';\nimport Fold from '../common/Fold.react';\nimport ToggleNotifications from '../common/ToggleNotifications.react';\nimport GroupPermissionsActionCreators from '../../actions/GroupPermissionsActionCreators'\n\nclass GroupProfile extends Component {\n  static propTypes = {\n    group: PropTypes.object.isRequired\n  };\n\n  static getStores() {\n    return [NotificationsStore, GroupStore, OnlineStore];\n  }\n\n  static calculateState(prevState, nextProps) {\n    const gid = nextProps.group.id;\n    const peer = gid ? PeerStore.getGroupPeer(gid) : null;\n    const notificationEnabled = NotificationsStore.isNotificationsEnabled(peer);\n    return {\n      peer,\n      isNotificationsEnabled: peer ? notificationEnabled : true,\n      integrationToken: GroupStore.getToken(),\n      message: OnlineStore.getMessage(),\n      groupPermissions: GroupStore.getGroupPermissions()\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleNotificationChange = this.handleNotificationChange.bind(this);\n    this.handleTokenSelect = this.handleTokenSelect.bind(this);\n    this.handleAvatarClick = this.handleAvatarClick.bind(this);\n    this.handleGroupPermissionsFoldChange = this.handleGroupPermissionsFoldChange.bind(this);\n    this.handleShowAdminsToMembersChange = this.handleShowAdminsToMembersChange.bind(this);\n    this.handleCanMembersInviteChange = this.handleCanMembersInviteChange.bind(this);\n    this.handleCanMembersEditGroupInfoChange = this.handleCanMembersEditGroupInfoChange.bind(this);\n    this.handleCanAdminsEditGroupInfoChange = this.handleCanAdminsEditGroupInfoChange.bind(this);\n    this.handleShowJoinLeaveMessagesChange = this.handleShowJoinLeaveMessagesChange.bind(this);\n    this.handlerSavePermissions = this.handlerSavePermissions.bind(this);\n\n  }\n\n  handleNotificationChange(event) {\n    const { peer } = this.state;\n    NotificationsActionCreators.changeNotificationsEnabled(peer, event.target.checked);\n  }\n\n  handleTokenSelect(event) {\n    event.target.select();\n  }\n\n  handleAvatarClick() {\n    lightbox.open(this.props.group.bigAvatar);\n  }\n\n  handleGroupPermissionsFoldChange(foldState){\n      if(foldState){\n          GroupPermissionsActionCreators.loadGroupPermissions(this.props.group.id)\n      }\n  }\n\n  handleShowAdminsToMembersChange(event) {\n      this.setState({ ...this.state,\n          groupPermissions: { ...this.state.groupPermissions,\n            showAdminsToMembers: event.target.checked\n          }\n      });\n  }\n\n  handleCanMembersInviteChange(event) {\n      this.setState({ ...this.state,\n          groupPermissions: { ...this.state.groupPermissions,\n              canMembersInvite: event.target.checked\n          }\n      });\n  }\n\n  handleCanMembersEditGroupInfoChange(event) {\n      this.setState({ ...this.state,\n          groupPermissions: { ...this.state.groupPermissions,\n              canMembersEditGroupInfo: event.target.checked\n          }\n      });\n  }\n\n  handleCanAdminsEditGroupInfoChange(event) {\n      this.setState({ ...this.state,\n          groupPermissions: { ...this.state.groupPermissions,\n              canAdminsEditGroupInfo: event.target.checked\n          }\n      });\n  }\n\n  handleShowJoinLeaveMessagesChange(event) {\n      this.setState({ ...this.state,\n          groupPermissions: { ...this.state.groupPermissions,\n              showJoinLeaveMessages: event.target.checked\n          }\n      });\n  }\n\n  handlerSavePermissions(event){\n      GroupPermissionsActionCreators.savePermissions(this.props.group.id, this.state.groupPermissions);\n  }\n\n  renderMainInfo() {\n    const { group } = this.props;\n    const admin = UserStore.getUser(group.ownerId);\n\n    return (\n      <header>\n        <AvatarItem\n          className=\"profile__avatar\"\n          size=\"large\"\n          image={group.bigAvatar}\n          placeholder={group.placeholder}\n          title={group.name}\n          onClick={this.handleAvatarClick}\n        />\n\n        <h3\n          className=\"group_profile__meta__title\"\n          dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.name) }}\n        />\n\n        <div className=\"group_profile__meta__created\">\n          <FormattedMessage id=\"createdBy\"/>\n          &nbsp;\n          <span dangerouslySetInnerHTML={{ __html: escapeWithEmoji(admin.name) }}/>\n        </div>\n      </header>\n    );\n  }\n\n  renderAbout() {\n    const { group: { about } } = this.props;\n\n    if (!about) {\n      return null;\n    }\n\n    return (\n      <div\n        className=\"group_profile__meta__description\"\n        dangerouslySetInnerHTML={{ __html: escapeWithEmoji(about).replace(/\\n/g, '<br/>') }}\n      />\n    );\n  }\n\n  renderToken() {\n    const { group: { ownerId } } = this.props;\n    const { integrationToken } = this.state;\n    const myId = UserStore.getMyId();\n\n    if (ownerId !== myId) {\n      return null;\n    }\n\n    return (\n      <li className=\"profile__list__item group_profile__integration no-p\">\n        <Fold icon=\"power\" iconClassName=\"icon--pink\" title={<FormattedMessage id=\"integrationToken\"/>}>\n\n          <div className=\"info info--light\">\n            <p><FormattedMessage id=\"integrationTokenHint\"/></p>\n            <a href=\"https://actor.readme.io/docs/simple-integration\" target=\"_blank\"><FormattedMessage id=\"integrationTokenHelp\"/></a>\n          </div>\n\n          <textarea\n            className=\"textarea\"\n            onClick={this.handleTokenSelect}\n            readOnly\n            rows=\"3\"\n            value={integrationToken}/>\n        </Fold>\n      </li>\n    );\n  }\n\n  renderGroupPermissions(){\n      const { group: {isCanEditAdministration} } = this.props;\n      const { groupPermissions } = this.state;\n\n      if (!isCanEditAdministration) {\n          return null;\n      }\n\n      return (\n          <li className=\"profile__list__item group_profile__integration2 no-p\">\n              <Fold icon=\"lock_open\" iconClassName=\"icon--squash\" title=\"Security Configurations\"\n                    onStateChange={this.handleGroupPermissionsFoldChange}>\n                  <ul className=\"profile__list\">\n                      <li className=\"profile__list__item no-p\">\n                          <label htmlFor=\"showAdminsToMembers\">\n                              {\"Show Admins to Members\"}\n                              <div className=\"switch pull-right\">\n                                  <input\n                                      checked={groupPermissions.showAdminsToMembers}\n                                      id=\"showAdminsToMembers\"\n                                      type=\"checkbox\"\n                                      onChange={this.handleShowAdminsToMembersChange}\n                                  />\n                                  <label htmlFor=\"showAdminsToMembers\"/>\n                              </div>\n                          </label>\n                      </li>\n                      <li className=\"profile__list__item no-p\">\n                          <label htmlFor=\"canMembersInvite\">\n                              {\"Can Members Invite\"}\n                              <div className=\"switch pull-right\">\n                                  <input\n                                      checked={groupPermissions.canMembersInvite}\n                                      id=\"canMembersInvite\"\n                                      type=\"checkbox\"\n                                      onChange={this.handleCanMembersInviteChange}\n                                  />\n                                  <label htmlFor=\"canMembersInvite\"/>\n                              </div>\n                          </label>\n                      </li>\n                      <li className=\"profile__list__item no-p\">\n                          <label htmlFor=\"canMembersEditGroupInfo\">\n                              {\"Can Members Edit Group Info\"}\n                              <div className=\"switch pull-right\">\n                                  <input\n                                      checked={groupPermissions.canMembersEditGroupInfo}\n                                      id=\"canMembersEditGroupInfo\"\n                                      type=\"checkbox\"\n                                      onChange={this.handleCanMembersEditGroupInfoChange}\n                                  />\n                                  <label htmlFor=\"canMembersEditGroupInfo\"/>\n                              </div>\n                          </label>\n                      </li>\n                      <li className=\"profile__list__item no-p\">\n                          <label htmlFor=\"canMembersEditGroupInfo\">\n                              {\"Can Admins Edit Group Info\"}\n                              <div className=\"switch pull-right\">\n                                  <input\n                                      checked={groupPermissions.canAdminsEditGroupInfo}\n                                      id=\"canAdminsEditGroupInfo\"\n                                      type=\"checkbox\"\n                                      onChange={this.handleCanAdminsEditGroupInfoChange}\n                                  />\n                                  <label htmlFor=\"canAdminsEditGroupInfo\"/>\n                              </div>\n                          </label>\n                      </li>\n                      <li className=\"profile__list__item no-p\">\n                          <label htmlFor=\"showJoinLeaveMessages\">\n                              {\"Show Join Leave Messages\"}\n                              <div className=\"switch pull-right\">\n                                  <input\n                                      checked={groupPermissions.showJoinLeaveMessages}\n                                      id=\"showJoinLeaveMessages\"\n                                      type=\"checkbox\"\n                                      onChange={this.handleShowJoinLeaveMessagesChange}\n                                  />\n                                  <label htmlFor=\"showJoinLeaveMessages\"/>\n                              </div>\n                          </label>\n                      </li>\n                  </ul>\n\n                  <button className=\"button button--lightblue pull-left\" ref=\"saveAdmins\"\n                          onClick={this.handlerSavePermissions}>\n                      {\"Save\"}\n                  </button>\n\n              </Fold>\n          </li>\n      );\n  }\n\n  renderGroupPre() {\n        const { group } = this.props;\n        return (\n            <li className=\"profile__list__item group_profile__integration no-p\">\n              <Fold icon=\"power\" iconClassName=\"icon--pink\" title=\"Criar Grupo Pre\">\n\n                <div className=\"info info--light\">\n                  <p><FormattedMessage id=\"integrationTokenHint\"/></p>\n                  <a href=\"https://actor.readme.io/docs/simple-integration\" target=\"_blank\"><FormattedMessage id=\"integrationTokenHelp\"/></a>\n                </div>\n\n                <textarea\n                    className=\"textarea\"\n                    onClick={this.handleTokenSelect}\n                    readOnly\n                    rows=\"3\"\n                    value={integrationToken}/>\n              </Fold>\n            </li>\n        );\n    }\n\n  render() {\n    const { group } = this.props;\n    const { isNotificationsEnabled, message } = this.state;\n    const isMember = DialogStore.isMember();\n\n    const iconElement = (\n      <SvgIcon className=\"icon icon--green\" glyph=\"members\" />\n    );\n\n    if (!isMember) {\n      return (\n        <div className=\"activity__body group_profile\">\n          <ul className=\"profile__list\">\n            <li className=\"profile__list__item group_profile__meta\">\n              {this.renderMainInfo()}\n              {this.renderAbout()}\n            </li>\n          </ul>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"activity__body group_profile\">\n        <Scrollbar>\n          <ul className=\"profile__list\">\n            <li className=\"profile__list__item group_profile__meta\">\n              {this.renderMainInfo()}\n              {this.renderAbout()}\n            </li>\n\n            <li className=\"profile__list__item group_profile__notifications no-p\">\n              <ToggleNotifications\n                  isNotificationsEnabled={isNotificationsEnabled}\n                                   onNotificationChange={this.handleNotificationChange}/>\n            </li>\n\n            <li className=\"profile__list__item group_profile__members no-p\">\n              <Fold iconElement={iconElement} title={message}>\n                <GroupProfileMembers groupId={group.id} members={group.members}/>\n              </Fold>\n            </li>\n\n           {/* <li className=\"profile__list__item group_profile__group_pre no-p\">\n                <GroupPreProperties groupId={group.id} groups={[]}/>\n            </li>*/}\n            {this.renderToken()}\n            {this.renderGroupPermissions()}\n          </ul>\n        </Scrollbar>\n      </div>\n    );\n  }\n}\n\nexport default Container.create(GroupProfile, { withProps: true, pure: false });\n"]}