{"version":3,"sources":["../../../../src/components/dialog/messages/MessageItem.react.js"],"names":["MessageItem","getStores","calculateState","prevState","props","isHighlighted","message","isMessageDropdownOpen","rid","context","showActions","event","openMessageActions","target","getBoundingClientRect","toggleMessageSelection","onSelect","onClick","bind","shouldComponentUpdate","nextProps","isShort","peer","equals","sender","show","selectDialogPeerUser","id","renderTitle","isGroupBot","group","getGroup","__html","name","title","renderHeader","state","userName","date","renderLeftBlock","avatar","placeholder","renderActions","isExperimental","messageActionsMenuClassName","render","isSelected","isEditing","messageClassName","content","contextTypes","delegate","object","bool","propTypes","isRequired","string","func","defaultProps","create","withProps"],"mappings":"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","file":"MessageItem.react.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { noop } from 'lodash';\r\nimport React, { Component, PropTypes } from 'react';\r\nimport { Container } from 'flux/utils';\r\nimport classnames from 'classnames';\r\nimport { escapeWithEmoji } from '../../../utils/EmojiUtils';\r\nimport PeerUtils from '../../../utils/PeerUtils';\r\n\r\nimport DialogActionCreators from '../../../actions/DialogActionCreators';\r\nimport ActivityActionCreators from '../../../actions/ActivityActionCreators';\r\nimport DropdownActionCreators from '../../../actions/DropdownActionCreators';\r\n\r\nimport DropdownStore from '../../../stores/DropdownStore';\r\nimport GroupStore from '../../../stores/GroupStore';\r\n\r\nimport SvgIcon from '../../common/SvgIcon.react';\r\nimport AvatarItem from '../../common/AvatarItem.react';\r\nimport State from './State.react';\r\nimport Reactions from './Reactions.react';\r\nimport MessageContent from './MessageContent.react';\r\n\r\nclass MessageItem extends Component {\r\n  static contextTypes = {\r\n    delegate: PropTypes.object,\r\n    isExperimental: PropTypes.bool\r\n  }\r\n\r\n  static propTypes = {\r\n    peer: PropTypes.object.isRequired,\r\n    message: PropTypes.object.isRequired,\r\n    state: PropTypes.string.isRequired,\r\n    isShort: PropTypes.bool.isRequired,\r\n    isEditing: PropTypes.bool.isRequired,\r\n    isSelected: PropTypes.bool.isRequired,\r\n    onSelect: PropTypes.func.isRequired\r\n  }\r\n\r\n  static defaultProps = {\r\n    isSelected: false,\r\n    onSelect: noop\r\n  };\r\n\r\n  static getStores() {\r\n    return [DropdownStore];\r\n  }\r\n\r\n  static calculateState(prevState, props) {\r\n    return {\r\n      isHighlighted: props && props.message ? DropdownStore.isMessageDropdownOpen(props.message.rid) : false\r\n    }\r\n  }\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return this.props.message !== nextProps.message ||\r\n           this.props.isShort !== nextProps.isShort;\r\n  }\r\n\r\n  onClick() {\r\n    const { message, peer } = this.props;\r\n\r\n    if (PeerUtils.equals(peer, message.sender.peer)) {\r\n      ActivityActionCreators.show();\r\n    } else {\r\n      DialogActionCreators.selectDialogPeerUser(message.sender.peer.id);\r\n    }\r\n  }\r\n\r\n  showActions = (event) => {\r\n    const { message } = this.props;\r\n    DropdownActionCreators.openMessageActions(event.target.getBoundingClientRect(), message);\r\n  };\r\n\r\n  toggleMessageSelection = () => {\r\n    const { message, onSelect } = this.props;\r\n    onSelect(message.rid);\r\n  };\r\n\r\n  renderTitle() {\r\n    const { message, peer } = this.props;\r\n\r\n    if (PeerUtils.isGroupBot(message.sender)) {\r\n      const group = GroupStore.getGroup(peer.id);\r\n      return (\r\n        <span className=\"message__sender__name\" dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.name) }}/>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className=\"message__sender__name\" dangerouslySetInnerHTML={{ __html: escapeWithEmoji(message.sender.title) }}/>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderHeader() {\r\n    const { isShort, message, state } = this.props;\r\n\r\n    if (isShort) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <header className=\"message__header\">\r\n        <h3 className=\"message__sender\">\r\n          <a onClick={this.onClick}>\r\n            {this.renderTitle()}\r\n            {\r\n              message.sender.userName\r\n                ? <span className=\"message__sender__nick\">@{message.sender.userName}</span>\r\n                : null\r\n            }\r\n          </a>\r\n        </h3>\r\n        <time className=\"message__timestamp\">{message.date}</time>\r\n        <State state={state} />\r\n      </header>\r\n    );\r\n  }\r\n\r\n  renderLeftBlock() {\r\n    const { isShort, message, state, peer } = this.props\r\n\r\n    if (isShort) {\r\n      return (\r\n        <div className=\"message__info\">\r\n          <time className=\"message__timestamp\">{message.date}</time>\r\n          <State state={state} />\r\n        </div>\r\n      );\r\n    } else {\r\n      if (PeerUtils.isGroupBot(message.sender)) {\r\n        const group = GroupStore.getGroup(peer.id);\r\n        return (\r\n          <div className=\"message__info message__info--avatar\">\r\n            <AvatarItem\r\n              className=\"message__avatar\"\r\n              image={group.avatar}\r\n              placeholder={group.placeholder}\r\n              title={group.name}\r\n              onClick={this.onClick}\r\n            />\r\n          </div>\r\n        )\r\n      } else {\r\n        return (\r\n          <div className=\"message__info message__info--avatar\">\r\n            <AvatarItem\r\n              className=\"message__avatar\"\r\n              image={message.sender.avatar}\r\n              placeholder={message.sender.placeholder}\r\n              title={message.sender.title}\r\n              onClick={this.onClick}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n    const { peer, message } = this.props;\r\n    const { isHighlighted } = this.state;\r\n    const { isExperimental } = this.context;\r\n\r\n    const messageActionsMenuClassName = classnames('message__actions__menu', {\r\n      'message__actions__menu--opened': isHighlighted\r\n    });\r\n\r\n    return (\r\n      <div className=\"message__actions\">\r\n        <Reactions peer={peer} message={message}/>\r\n\r\n        <div className={messageActionsMenuClassName} onClick={this.showActions}>\r\n          <SvgIcon className=\"icon icon--dropdown\" glyph=\"cog\" />\r\n        </div>\r\n\r\n        {\r\n          isExperimental\r\n            ? <div className=\"message__actions__selector\" onClick={this.toggleMessageSelection}>\r\n                <i className=\"icon material-icons icon-check\"></i>\r\n              </div>\r\n            : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { message, isShort, isSelected, isEditing } = this.props;\r\n    const { isHighlighted } = this.state;\r\n\r\n    const messageClassName = classnames('message', {\r\n      'message--short': isShort,\r\n      'message--active': isHighlighted,\r\n      'message--selected': isSelected,\r\n      'message--editing': isEditing\r\n    });\r\n\r\n    return (\r\n      <div className={messageClassName}>\r\n        {this.renderLeftBlock()}\r\n        <div className=\"message__body\">\r\n          {this.renderHeader()}\r\n          <MessageContent content={message.content} rid={message.rid}/>\r\n        </div>\r\n        {this.renderActions()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container.create(MessageItem, { withProps: true });\r\n"]}