{"version":3,"sources":["../../../../src/components/dialog/messages/Animation.react.js"],"names":["Animation","props","state","playing","isAnimationAutoPlayEnabled","onClick","bind","componentDidMount","preview","refs","canvas","catch","e","console","error","event","preventDefault","setState","getDimentions","width","w","height","h","renderImage","source","renderCanvas","style","display","renderState","glyph","className","render","fileUrl","propTypes","string","number","isRequired"],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;+eAPA;;;;IASMA,S;;;AAQJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAGjB,UAAKC,KAAL,GAAa;AACXC,eAAS,2BAAiBC,0BAAjB;AADE,KAAb;;AAIA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AAPiB;AAQlB;;sBAEDC,iB,gCAAoB;AAClB,QAAI,KAAKL,KAAT,EAAgB;AACd,2CAAoB,KAAKD,KAAL,CAAWO,OAA/B,EAAwC,KAAKC,IAAL,CAAUC,MAAlD,EAA0DC,KAA1D,CAAgE,UAACC,CAAD,EAAO;AACrEC,gBAAQC,KAAR,CAAcF,CAAd;AACD,OAFD;AAGD;AACF,G;;sBAEDP,O,oBAAQU,K,EAAO;AACbA,UAAMC,cAAN;AACA,SAAKC,QAAL,CAAc,EAAEd,SAAS,CAAC,KAAKD,KAAL,CAAWC,OAAvB,EAAd;AACD,G;;sBAEDe,a,4BAAgB;AAAA,iBACkB,KAAKjB,KADvB;AAAA,QACHkB,KADG,UACNC,CADM;AAAA,QACOC,MADP,UACIC,CADJ;;AAEd,WAAO,+BAAcH,KAAd,EAAqBE,MAArB,CAAP;AACD,G;;sBAEDE,W,wBAAYC,M,EAAQL,K,EAAOE,M,EAAQlB,O,EAAS;AAC1C,QAAI,CAACA,OAAL,EAAc;AACZ,aAAO,IAAP;AACD;;AAED,WACE;AACE,WAAKqB,MADP;AAEE,aAAOL,KAFT;AAGE,cAAQE,MAHV;AAIE,eAAS,KAAKhB;AAJhB,MADF;AAQD,G;;sBAEDoB,Y,yBAAaN,K,EAAOE,M,EAAQlB,O,EAAS;AACnC,QAAMuB,QAAQ,EAAEP,YAAF,EAASE,cAAT,EAAd;AACA,QAAIlB,OAAJ,EAAa;AACX;AACAuB,YAAMC,OAAN,GAAgB,MAAhB;AACD;;AAED,WACE;AACE,WAAI,QADN;AAEE,aAAOD,KAFT;AAGE,eAAS,KAAKrB;AAHhB,MADF;AAOD,G;;sBAEDuB,W,wBAAYzB,O,EAAS;AACnB,QAAM0B,QAAQ1B,UAAU,sBAAV,GAAmC,qBAAjD;;AAEA,QAAM2B,YAAY,0BAAW,0CAAX,EAAuD;AACvE,4CAAsC3B;AADiC,KAAvD,CAAlB;;AAIA,WACE;AAAA;AAAA,QAAG,WAAW2B,SAAd,EAAyB,SAAS,KAAKzB,OAAvC;AAAiDwB;AAAjD,KADF;AAGD,G;;sBAEDE,M,qBAAS;AAAA,QACC5B,OADD,GACa,KAAKD,KADlB,CACCC,OADD;;AAAA,0BAEmB,KAAKe,aAAL,EAFnB;AAAA,QAECC,KAFD,mBAECA,KAFD;AAAA,QAEQE,MAFR,mBAEQA,MAFR;;AAGP,QAAMG,SAAS,KAAKvB,KAAL,CAAW+B,OAAX,IAAsB,KAAK/B,KAAL,CAAWO,OAAhD;;AAEA,WACE;AAAA;AAAA,QAAK,WAAU,oBAAf,EAAoC,OAAO,EAAEW,YAAF,EAASE,cAAT,EAA3C;AACG,WAAKO,WAAL,CAAiBzB,OAAjB,CADH;AAEG,WAAKoB,WAAL,CAAiBC,MAAjB,EAAyBL,KAAzB,EAAgCE,MAAhC,EAAwClB,OAAxC,CAFH;AAGG,WAAKsB,YAAL,CAAkBN,KAAlB,EAAyBE,MAAzB,EAAiClB,OAAjC;AAHH,KADF;AAOD,G;;;;;AA3FGH,S,CACGiC,S,GAAY;AACjBD,WAAS,iBAAUE,MADF;AAEjBd,KAAG,iBAAUe,MAAV,CAAiBC,UAFH;AAGjBd,KAAG,iBAAUa,MAAV,CAAiBC,UAHH;AAIjB5B,WAAS,iBAAU0B,MAAV,CAAiBE;AAJT,C;kBA6FNpC,S","file":"Animation.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport classNames from 'classnames';\nimport PreferencesStore from '../../../stores/PreferencesStore';\nimport { getDimentions, renderImageToCanvas } from '../../../utils/ImageUtils';\n\nclass Animation extends Component {\n  static propTypes = {\n    fileUrl: PropTypes.string,\n    w: PropTypes.number.isRequired,\n    h: PropTypes.number.isRequired,\n    preview: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: PreferencesStore.isAnimationAutoPlayEnabled()\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state) {\n      renderImageToCanvas(this.props.preview, this.refs.canvas).catch((e) => {\n        console.error(e);\n      });\n    }\n  }\n\n  onClick(event) {\n    event.preventDefault();\n    this.setState({ playing: !this.state.playing });\n  }\n\n  getDimentions() {\n    const { w: width, h: height } = this.props;\n    return getDimentions(width, height);\n  }\n\n  renderImage(source, width, height, playing) {\n    if (!playing) {\n      return null;\n    }\n\n    return (\n      <img\n        src={source}\n        width={width}\n        height={height}\n        onClick={this.onClick}\n      />\n    );\n  }\n\n  renderCanvas(width, height, playing) {\n    const style = { width, height };\n    if (playing) {\n      // Hide using style because DOM node required by renderImageToCanvas\n      style.display = 'none';\n    }\n\n    return (\n      <canvas\n        ref=\"canvas\"\n        style={style}\n        onClick={this.onClick}\n      />\n    );\n  }\n\n  renderState(playing) {\n    const glyph = playing ? 'pause_circle_outline' : 'play_circle_outline';\n\n    const className = classNames('material-icons message__animation__state', {\n      'message__animation__state--playing': playing\n    });\n\n    return (\n      <i className={className} onClick={this.onClick}>{glyph}</i>\n    );\n  }\n\n  render() {\n    const { playing } = this.state;\n    const { width, height } = this.getDimentions();\n    const source = this.props.fileUrl || this.props.preview;\n\n    return (\n      <div className=\"message__animation\" style={{ width, height }}>\n        {this.renderState(playing)}\n        {this.renderImage(source, width, height, playing)}\n        {this.renderCanvas(width, height, playing)}\n      </div>\n    );\n  }\n}\n\nexport default Animation;\n"]}