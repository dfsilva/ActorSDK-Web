{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":["MESSAGE_COUNT_STEP","getMessageId","message","rid","MessageStore","getInitialState","messages","overlay","isLoaded","receiveDate","readDate","readByMeDate","count","firstId","lastId","unreadId","editId","changeReason","UNKNOWN","selected","Set","isAllRendered","getState","length","reduce","state","action","type","BIND_DIALOG_PEER","MESSAGES_CHANGED","nextState","Math","min","UNSHIFT","lengthDiff","PUSH","UPDATE","unreadIndex","getMyId","MESSAGES_LOAD_MORE","MESSAGES_TOGGLE_SELECTED","has","id","remove","add","MESSAGES_EDIT_START","MESSAGES_EDIT_END"],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport Immutable from 'immutable';\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\r\nimport { getFirstUnreadMessageIndex } from '../utils/MessageUtils';\r\nimport UserStore from './UserStore';\r\n\r\nconst MESSAGE_COUNT_STEP = 20;\r\n\r\nconst getMessageId = (message) => message ? message.rid : null;\r\n\r\nclass MessageStore extends ReduceStore {\r\n  getInitialState() {\r\n    return {\r\n      messages: [],\r\n      overlay: [],\r\n      isLoaded: false,\r\n      receiveDate: 0,\r\n      readDate: 0,\r\n      readByMeDate: 0,\r\n      count: 0,\r\n      firstId: null,\r\n      lastId: null,\r\n      unreadId: null,\r\n      editId: null,\r\n      changeReason: MessageChangeReason.UNKNOWN,\r\n      selected: new Immutable.Set()\r\n    };\r\n  }\r\n\r\n  isAllRendered() {\r\n    const { messages, count } = this.getState();\r\n    return messages.length === count;\r\n  }\r\n\r\n  reduce (state, action) {\r\n    switch (action.type) {\r\n      case ActionTypes.BIND_DIALOG_PEER:\r\n        return this.getInitialState();\r\n\r\n      case ActionTypes.MESSAGES_CHANGED:\r\n        const firstId = getMessageId(action.messages[0]);\r\n        const lastId = getMessageId(action.messages[action.messages.length - 1]);\r\n\r\n        const nextState = {\r\n          ...state,\r\n          firstId,\r\n          lastId,\r\n          messages: action.messages,\r\n          overlay: action.overlay,\r\n          receiveDate: action.receiveDate,\r\n          readDate: action.readDate,\r\n          readByMeDate: action.readByMeDate,\r\n          isLoaded: action.isLoaded\r\n        };\r\n\r\n        if (firstId !== state.firstId) {\r\n          nextState.count = Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP);\r\n          nextState.changeReason = MessageChangeReason.UNSHIFT;\r\n        } else if (lastId !== state.lastId) {\r\n          // TODO: possible incorrect\r\n          const lengthDiff = action.messages.length - state.messages.length;\r\n\r\n          nextState.count = Math.min(action.messages.length, state.count + lengthDiff);\r\n          nextState.changeReason = MessageChangeReason.PUSH;\r\n        } else {\r\n          nextState.count = Math.min(action.messages.length, state.count);\r\n          nextState.changeReason = MessageChangeReason.UPDATE;\r\n        }\r\n\r\n        if (state.readByMeDate === 0 && action.readByMeDate > 0) {\r\n          const unreadIndex = getFirstUnreadMessageIndex(action.messages, action.readByMeDate, UserStore.getMyId());\r\n          if (unreadIndex === -1) {\r\n            nextState.unreadId = null;\r\n          } else {\r\n            nextState.unreadId = action.messages[unreadIndex].rid;\r\n            if (unreadIndex > nextState.count) {\r\n              nextState.count = Math.min((action.messages.length - unreadIndex) + MESSAGE_COUNT_STEP, action.messages.length);\r\n            }\r\n          }\r\n        }\r\n\r\n        return nextState;\r\n\r\n      case ActionTypes.MESSAGES_LOAD_MORE:\r\n        return {\r\n          ...state,\r\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\r\n          changeReason: MessageChangeReason.UNSHIFT\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\r\n        return {\r\n          ...state,\r\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_EDIT_START:\r\n        return {\r\n          ...state,\r\n          editId: action.message.rid\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_EDIT_END:\r\n        return {\r\n          ...state,\r\n          editId: null\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MessageStore(Dispatcher);\r\n"]}