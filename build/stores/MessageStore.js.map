{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":["MESSAGE_COUNT_STEP","getMessageId","message","rid","MessageStore","getInitialState","messages","overlay","isLoaded","receiveDate","readDate","readByMeDate","count","firstId","lastId","unreadId","editId","changeReason","UNKNOWN","selected","Set","isAllRendered","getState","length","reduce","state","action","type","BIND_DIALOG_PEER","MESSAGES_CHANGED","nextState","Math","min","UNSHIFT","lengthDiff","PUSH","UPDATE","unreadIndex","getMyId","MESSAGES_LOAD_MORE","MESSAGES_TOGGLE_SELECTED","has","id","remove","add","MESSAGES_EDIT_START","MESSAGES_EDIT_END"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;+eATA;;;;AAWA,IAAMA,qBAAqB,EAA3B;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD;AAAA,SAAaA,UAAUA,QAAQC,GAAlB,GAAwB,IAArC;AAAA,CAArB;;IAEMC,Y;;;;;;;;;yBACJC,e,8BAAkB;AAChB,WAAO;AACLC,gBAAU,EADL;AAELC,eAAS,EAFJ;AAGLC,gBAAU,KAHL;AAILC,mBAAa,CAJR;AAKLC,gBAAU,CALL;AAMLC,oBAAc,CANT;AAOLC,aAAO,CAPF;AAQLC,eAAS,IARJ;AASLC,cAAQ,IATH;AAULC,gBAAU,IAVL;AAWLC,cAAQ,IAXH;AAYLC,oBAAc,uCAAoBC,OAZ7B;AAaLC,gBAAU,IAAI,oBAAUC,GAAd;AAbL,KAAP;AAeD,G;;yBAEDC,a,4BAAgB;AAAA,oBACc,KAAKC,QAAL,EADd;AAAA,QACNhB,QADM,aACNA,QADM;AAAA,QACIM,KADJ,aACIA,KADJ;;AAEd,WAAON,SAASiB,MAAT,KAAoBX,KAA3B;AACD,G;;yBAEDY,M,mBAAQC,K,EAAOC,M,EAAQ;AACrB,YAAQA,OAAOC,IAAf;AACE,WAAK,+BAAYC,gBAAjB;AACE,eAAO,KAAKvB,eAAL,EAAP;;AAEF,WAAK,+BAAYwB,gBAAjB;AACE,YAAMhB,UAAUZ,aAAayB,OAAOpB,QAAP,CAAgB,CAAhB,CAAb,CAAhB;AACA,YAAMQ,SAASb,aAAayB,OAAOpB,QAAP,CAAgBoB,OAAOpB,QAAP,CAAgBiB,MAAhB,GAAyB,CAAzC,CAAb,CAAf;;AAEA,YAAMO,yBACDL,KADC;AAEJZ,0BAFI;AAGJC,wBAHI;AAIJR,oBAAUoB,OAAOpB,QAJb;AAKJC,mBAASmB,OAAOnB,OALZ;AAMJE,uBAAaiB,OAAOjB,WANhB;AAOJC,oBAAUgB,OAAOhB,QAPb;AAQJC,wBAAce,OAAOf,YARjB;AASJH,oBAAUkB,OAAOlB;AATb,UAAN;;AAYA,YAAIK,YAAYY,MAAMZ,OAAtB,EAA+B;AAC7BiB,oBAAUlB,KAAV,GAAkBmB,KAAKC,GAAL,CAASN,OAAOpB,QAAP,CAAgBiB,MAAzB,EAAiCE,MAAMb,KAAN,GAAcZ,kBAA/C,CAAlB;AACA8B,oBAAUb,YAAV,GAAyB,uCAAoBgB,OAA7C;AACD,SAHD,MAGO,IAAInB,WAAWW,MAAMX,MAArB,EAA6B;AAClC;AACA,cAAMoB,aAAaR,OAAOpB,QAAP,CAAgBiB,MAAhB,GAAyBE,MAAMnB,QAAN,CAAeiB,MAA3D;;AAEAO,oBAAUlB,KAAV,GAAkBmB,KAAKC,GAAL,CAASN,OAAOpB,QAAP,CAAgBiB,MAAzB,EAAiCE,MAAMb,KAAN,GAAcsB,UAA/C,CAAlB;AACAJ,oBAAUb,YAAV,GAAyB,uCAAoBkB,IAA7C;AACD,SANM,MAMA;AACLL,oBAAUlB,KAAV,GAAkBmB,KAAKC,GAAL,CAASN,OAAOpB,QAAP,CAAgBiB,MAAzB,EAAiCE,MAAMb,KAAvC,CAAlB;AACAkB,oBAAUb,YAAV,GAAyB,uCAAoBmB,MAA7C;AACD;;AAED,YAAIX,MAAMd,YAAN,KAAuB,CAAvB,IAA4Be,OAAOf,YAAP,GAAsB,CAAtD,EAAyD;AACvD,cAAM0B,cAAc,8CAA2BX,OAAOpB,QAAlC,EAA4CoB,OAAOf,YAAnD,EAAiE,oBAAU2B,OAAV,EAAjE,CAApB;AACA,cAAID,gBAAgB,CAAC,CAArB,EAAwB;AACtBP,sBAAUf,QAAV,GAAqB,IAArB;AACD,WAFD,MAEO;AACLe,sBAAUf,QAAV,GAAqBW,OAAOpB,QAAP,CAAgB+B,WAAhB,EAA6BlC,GAAlD;AACA,gBAAIkC,cAAcP,UAAUlB,KAA5B,EAAmC;AACjCkB,wBAAUlB,KAAV,GAAkBmB,KAAKC,GAAL,CAAUN,OAAOpB,QAAP,CAAgBiB,MAAhB,GAAyBc,WAA1B,GAAyCrC,kBAAlD,EAAsE0B,OAAOpB,QAAP,CAAgBiB,MAAtF,CAAlB;AACD;AACF;AACF;;AAED,eAAOO,SAAP;;AAEF,WAAK,+BAAYS,kBAAjB;AACE,4BACKd,KADL;AAEEb,iBAAOmB,KAAKC,GAAL,CAASP,MAAMnB,QAAN,CAAeiB,MAAxB,EAAgCE,MAAMb,KAAN,GAAcZ,kBAA9C,CAFT;AAGEiB,wBAAc,uCAAoBgB;AAHpC;;AAMF,WAAK,+BAAYO,wBAAjB;AACE,4BACKf,KADL;AAEEN,oBAAUM,MAAMN,QAAN,CAAesB,GAAf,CAAmBf,OAAOgB,EAA1B,IAAgCjB,MAAMN,QAAN,CAAewB,MAAf,CAAsBjB,OAAOgB,EAA7B,CAAhC,GAAmEjB,MAAMN,QAAN,CAAeyB,GAAf,CAAmBlB,OAAOgB,EAA1B;AAF/E;;AAKF,WAAK,+BAAYG,mBAAjB;AACE,4BACKpB,KADL;AAEET,kBAAQU,OAAOxB,OAAP,CAAeC;AAFzB;;AAKF,WAAK,+BAAY2C,iBAAjB;AACE,4BACKrB,KADL;AAEET,kBAAQ;AAFV;;AAKF;AACE,eAAOS,KAAP;AA1EJ;AA4ED,G;;;;;kBAGY,IAAIrB,YAAJ,8B","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\nimport { getFirstUnreadMessageIndex } from '../utils/MessageUtils';\nimport UserStore from './UserStore';\n\nconst MESSAGE_COUNT_STEP = 20;\n\nconst getMessageId = (message) => message ? message.rid : null;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      readByMeDate: 0,\n      count: 0,\n      firstId: null,\n      lastId: null,\n      unreadId: null,\n      editId: null,\n      changeReason: MessageChangeReason.UNKNOWN,\n      selected: new Immutable.Set()\n    };\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return this.getInitialState();\n\n      case ActionTypes.MESSAGES_CHANGED:\n        const firstId = getMessageId(action.messages[0]);\n        const lastId = getMessageId(action.messages[action.messages.length - 1]);\n\n        const nextState = {\n          ...state,\n          firstId,\n          lastId,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          readByMeDate: action.readByMeDate,\n          isLoaded: action.isLoaded\n        };\n\n        if (firstId !== state.firstId) {\n          nextState.count = Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP);\n          nextState.changeReason = MessageChangeReason.UNSHIFT;\n        } else if (lastId !== state.lastId) {\n          // TODO: possible incorrect\n          const lengthDiff = action.messages.length - state.messages.length;\n\n          nextState.count = Math.min(action.messages.length, state.count + lengthDiff);\n          nextState.changeReason = MessageChangeReason.PUSH;\n        } else {\n          nextState.count = Math.min(action.messages.length, state.count);\n          nextState.changeReason = MessageChangeReason.UPDATE;\n        }\n\n        if (state.readByMeDate === 0 && action.readByMeDate > 0) {\n          const unreadIndex = getFirstUnreadMessageIndex(action.messages, action.readByMeDate, UserStore.getMyId());\n          if (unreadIndex === -1) {\n            nextState.unreadId = null;\n          } else {\n            nextState.unreadId = action.messages[unreadIndex].rid;\n            if (unreadIndex > nextState.count) {\n              nextState.count = Math.min((action.messages.length - unreadIndex) + MESSAGE_COUNT_STEP, action.messages.length);\n            }\n          }\n        }\n\n        return nextState;\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\n          changeReason: MessageChangeReason.UNSHIFT\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      case ActionTypes.MESSAGES_EDIT_START:\n        return {\n          ...state,\n          editId: action.message.rid\n        };\n\n      case ActionTypes.MESSAGES_EDIT_END:\n        return {\n          ...state,\n          editId: null\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}