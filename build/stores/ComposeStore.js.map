{"version":3,"sources":["../../src/stores/ComposeStore.js"],"names":["ComposeStore","getInitialState","text","mentions","commands","autoFocus","editMessage","reduce","state","action","type","COMPOSE_CLEAN","BIND_DIALOG_PEER","COMPOSE_TYPING","nextState","peer","GROUP","query","caretPosition","findMentions","id","command","findBotCommands","name","MESSAGES_EDIT_START","message","content","MESSAGES_EDIT_END","COMPOSE_MENTION_INSERT","console","error","mentionEnding","atStart","textBeforeMention","substring","length","textAfterMention","mention","mentionText","COMPOSE_MENTION_CLOSE","DRAFT_LOAD","draft","EMOJI_INSERT","textBeforeEmoji","textAfterEmoji","emoji","COMPOSE_PASTE","COMPOSE_TOGGLE_AUTO_FOCUS","isEnable","SEARCH_TOGGLE_FOCUS"],"mappings":"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","file":"ComposeStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\r\nimport ActorClient from '../utils/ActorClient';\r\nimport { parseMentionQuery, parseBotCommand } from '../utils/ComposeUtils';\r\n\r\nclass ComposeStore extends ReduceStore {\r\n  getInitialState() {\r\n    return {\r\n      text: '',\r\n      mentions: null,\r\n      commands: null,\r\n      autoFocus: true,\r\n      editMessage: null\r\n    };\r\n  }\r\n\r\n  reduce(state, action) {\r\n    switch (action.type) {\r\n      case ActionTypes.COMPOSE_CLEAN:\r\n      case ActionTypes.BIND_DIALOG_PEER:\r\n        return this.getInitialState();\r\n\r\n      case ActionTypes.COMPOSE_TYPING:\r\n        const nextState = {\r\n          ...state,\r\n          text: action.text,\r\n          commands: null,\r\n          mentions: null\r\n        };\r\n\r\n        if (action.peer.type === PeerTypes.GROUP) {\r\n          const query = parseMentionQuery(action.text, action.caretPosition);\r\n          if (query) {\r\n            nextState.mentions = ActorClient.findMentions(action.peer.id, query.text);\r\n          }\r\n        } else {\r\n          const command = parseBotCommand(action.text);\r\n          if (command) {\r\n            nextState.commands = ActorClient.findBotCommands(action.peer.id, command.name || '');\r\n          }\r\n        }\r\n\r\n        return nextState;\r\n\r\n      case ActionTypes.MESSAGES_EDIT_START:\r\n        return {\r\n          ...state,\r\n          text: action.message.content.text,\r\n          editMessage: action.message\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_EDIT_END:\r\n        return {\r\n          ...state,\r\n          text: '',\r\n          editMessage: null\r\n        };\r\n\r\n      case ActionTypes.COMPOSE_MENTION_INSERT:\r\n        const query = parseMentionQuery(action.text, action.caretPosition);\r\n        if (!query) {\r\n          console.error('Mention not found', { state, action });\r\n          return state;\r\n        }\r\n\r\n        const mentionEnding = query.atStart ? ': ' : ' ';\r\n        const textBeforeMention = action.text.substring(0, action.caretPosition - query.text.length - 1);\r\n        const textAfterMention = action.text.substring(action.caretPosition, action.text.length);\r\n\r\n        return {\r\n          ...state,\r\n          text: textBeforeMention + action.mention.mentionText + mentionEnding + textAfterMention,\r\n          mentions: null\r\n        };\r\n\r\n      case ActionTypes.COMPOSE_MENTION_CLOSE:\r\n        return {\r\n          ...state,\r\n          mentions: null\r\n        };\r\n\r\n      case ActionTypes.DRAFT_LOAD:\r\n        return {\r\n          ...state,\r\n          text: action.draft\r\n        };\r\n\r\n      case ActionTypes.EMOJI_INSERT:\r\n        const textBeforeEmoji = action.text.substring(0, action.caretPosition);\r\n        const textAfterEmoji = action.text.substring(action.caretPosition, action.text.length);\r\n\r\n        return {\r\n          ...state,\r\n          text: textBeforeEmoji + action.emoji + ' ' + textAfterEmoji\r\n        };\r\n\r\n      case ActionTypes.COMPOSE_PASTE:\r\n        return {\r\n          ...state,\r\n          text: action.text\r\n        };\r\n\r\n      case ActionTypes.COMPOSE_TOGGLE_AUTO_FOCUS:\r\n        return {\r\n          ...state,\r\n          autoFocus: action.isEnable\r\n        };\r\n\r\n      case ActionTypes.SEARCH_TOGGLE_FOCUS:\r\n        return {\r\n          ...state,\r\n          autoFocus: !action.isEnable\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ComposeStore(Dispatcher);\r\n"]}