{"version":3,"sources":["../../src/stores/LoginStore.js"],"names":["step","LOGIN_WAIT","errors","login","code","signup","name","isCodeRequested","isCodeSended","isSignupStarted","myUid","LoginStore","dispatcher","getStep","getErrors","getLogin","getCode","getName","getMyId","isLoggedIn","resetStore","intl","__onDispatch","action","type","AUTH_CHANGE_LOGIN","__emitChange","AUTH_CHANGE_CODE","AUTH_CHANGE_NAME","AUTH_CODE_REQUEST","AUTH_CODE_REQUEST_SUCCESS","CODE_WAIT","AUTH_CODE_REQUEST_FAILURE","error","messages","AUTH_CODE_SEND","AUTH_CODE_SEND_SUCCESS","AUTH_CODE_SEND_FAILURE","AUTH_SIGNUP_START","NAME_WAIT","AUTH_SIGNUP","AUTH_SIGNUP_SUCCESS","AUTH_SIGNUP_FAILURE","AUTH_RESTART","AUTH_SET_LOGGED_IN","getUid","AUTH_SET_LOGGED_OUT","localStorage","clear","location","reload"],"mappings":"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","file":"LoginStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AuthSteps } from '../constants/ActorAppConstants';\n\n\nimport ActorClient from '../utils/ActorClient';\n\nimport { getIntlData } from '../l18n';\n\nlet step = AuthSteps.LOGIN_WAIT,\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    },\n    login = '',\n    code = '',\n    name = '',\n    isCodeRequested = false,\n    isCodeSended = false,\n    isSignupStarted = false,\n    myUid = null;\n\nclass LoginStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    // TODO: do not use intlData here. save error codes and send them to ui.\n    this.intl = getIntlData();\n  }\n\n  getStep = () => step;\n  getErrors = () => errors;\n  getLogin = () => login;\n  getCode = () => code;\n  getName = () => name;\n  isCodeRequested = () => isCodeRequested;\n  isCodeSended = () => isCodeSended;\n  isSignupStarted = () => isSignupStarted;\n  getMyId = () => myUid;\n  isLoggedIn = () => ActorClient.isLoggedIn();\n\n  resetStore = () => {\n    step = AuthSteps.LOGIN_WAIT;\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    };\n    login = code = name = '';\n    isCodeRequested = isCodeSended = isSignupStarted = false;\n    myUid = null;\n  };\n\n  __onDispatch(action) {\n    switch (action.type) {\n\n      case ActionTypes.AUTH_CHANGE_LOGIN:\n        login = action.login;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_CODE:\n        code = action.code;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_NAME:\n        name = action.name;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_REQUEST:\n        isCodeRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_SUCCESS:\n        step = AuthSteps.CODE_WAIT;\n        errors.login = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_FAILURE:\n        switch (action.error) {\n          case 'PHONE_NUMBER_INVALID':\n            errors.login = this.intl.messages['login.errors.numberInvalid'];\n            break;\n          case 'CODE_WAIT':\n            errors.login = this.intl.messages['login.errors.codeWait'];\n            break;\n          case 'EMAIL_INVALID':\n              errors.login = this.intl.messages['login.errors.emailInvalid'];\n              break;\n          default:\n            errors.login = action.error;\n        }\n        isCodeRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_SEND:\n        isCodeSended = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_SUCCESS:\n        errors.code = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_FAILURE:\n        switch (action.error) {\n          case 'PHONE_CODE_INVALID':\n          case 'EMAIL_CODE_INVALID':\n            errors.code = this.intl.messages['login.errors.codeInvalid'];\n            break;\n          case 'PHONE_CODE_EXPIRED':\n            errors.code = this.intl.messages['login.errors.codeExpired'];\n            break;\n          default:\n            errors.code = action.error;\n        }\n        isCodeSended = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP_START:\n        step = AuthSteps.NAME_WAIT;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP:\n        isSignupStarted = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_SUCCESS:\n        errors.signup = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_FAILURE:\n        switch (action.error) {\n          case 'NAME_INVALID':\n            errors.signup = this.intl.messages['login.errors.nameInvalid'];\n            break;\n          default:\n            errors.signup = action.error;\n        }\n        isSignupStarted = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_RESTART:\n        this.resetStore();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SET_LOGGED_IN:\n        myUid = ActorClient.getUid();\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SET_LOGGED_OUT:\n        localStorage.clear();\n        location.reload();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new LoginStore(Dispatcher);\n"]}