{"version":3,"sources":["../../src/stores/LoginStore.js"],"names":["step","LOGIN_WAIT","loginType","errors","login","code","signup","name","isCodeRequested","isCodeSended","isSignupStarted","myUid","LoginStore","dispatcher","getStep","getLoginType","getErrors","getLogin","getCode","getName","getMyId","isLoggedIn","resetStore","get","intl","__onDispatch","action","type","AUTH_START","__emitChange","AUTH_CHANGE_LOGIN","AUTH_CHANGE_CODE","AUTH_CHANGE_NAME","AUTH_CODE_REQUEST","AUTH_CODE_REQUEST_SUCCESS","CODE_WAIT","AUTH_CODE_REQUEST_FAILURE","error","messages","AUTH_CODE_SEND","AUTH_CODE_SEND_SUCCESS","AUTH_CODE_SEND_FAILURE","AUTH_SIGNUP_START","NAME_WAIT","AUTH_SIGNUP","AUTH_SIGNUP_SUCCESS","AUTH_SIGNUP_FAILURE","AUTH_RESTART","AUTH_SET_LOGGED_IN","getUid","AUTH_SET_LOGGED_OUT","localStorage","clear","location","reload","AUTH_TOOGLE_LOGIN_TYPE"],"mappings":"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","file":"LoginStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { Store } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, AuthSteps } from '../constants/ActorAppConstants';\r\nimport SharedContainer from '../utils/SharedContainer';\r\nimport ActorClient from '../utils/ActorClient';\r\nimport { getIntlData } from '../l18n';\r\n\r\nlet step = AuthSteps.LOGIN_WAIT,\r\n    loginType = 0,\r\n    errors = {\r\n      login: null,\r\n      code: null,\r\n      signup: null\r\n    },\r\n    login = '',\r\n    code = '',\r\n    name = '',\r\n    isCodeRequested = false,\r\n    isCodeSended = false,\r\n    isSignupStarted = false,\r\n    myUid = null;\r\n\r\nclass LoginStore extends Store {\r\n  constructor(dispatcher) {\r\n    super(dispatcher);\r\n\r\n    // TODO: do not use intlData here. save error codes and send them to ui.\r\n    this.intl = getIntlData();\r\n  }\r\n\r\n  getStep = () => step;\r\n  getLoginType = () => loginType;\r\n  getErrors = () => errors;\r\n  getLogin = () => login;\r\n  getCode = () => code;\r\n  getName = () => name;\r\n  isCodeRequested = () => isCodeRequested;\r\n  isCodeSended = () => isCodeSended;\r\n  isSignupStarted = () => isSignupStarted;\r\n  getMyId = () => myUid;\r\n  isLoggedIn = () => ActorClient.isLoggedIn();\r\n\r\n  resetStore = () => {\r\n    step = AuthSteps.LOGIN_WAIT;\r\n    loginType = SharedContainer.get().loginType;\r\n    errors = {\r\n      login: null,\r\n      code: null,\r\n      signup: null\r\n    };\r\n    login = code = name = '';\r\n    isCodeRequested = isCodeSended = isSignupStarted = false;\r\n    myUid = null;\r\n  };\r\n\r\n  __onDispatch(action) {\r\n    switch (action.type) {\r\n      case ActionTypes.AUTH_START:\r\n          loginType = SharedContainer.get().loginType;\r\n          this.__emitChange();\r\n          break;\r\n      case ActionTypes.AUTH_CHANGE_LOGIN:\r\n        login = action.login;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CHANGE_CODE:\r\n        code = action.code;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CHANGE_NAME:\r\n        name = action.name;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CODE_REQUEST:\r\n        isCodeRequested = true;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CODE_REQUEST_SUCCESS:\r\n        step = AuthSteps.CODE_WAIT;\r\n        errors.login = null;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CODE_REQUEST_FAILURE:\r\n        switch (action.error) {\r\n          case 'PHONE_NUMBER_INVALID':\r\n            errors.login = this.intl.messages['login.errors.numberInvalid'];\r\n            break;\r\n          case 'CODE_WAIT':\r\n            errors.login = this.intl.messages['login.errors.codeWait'];\r\n            break;\r\n          case 'EMAIL_INVALID':\r\n              errors.login = this.intl.messages['login.errors.emailInvalid'];\r\n              break;\r\n          default:\r\n            errors.login = action.error;\r\n        }\r\n        isCodeRequested = false;\r\n        this.__emitChange();\r\n        break;\r\n\r\n      case ActionTypes.AUTH_CODE_SEND:\r\n        isCodeSended = true;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CODE_SEND_SUCCESS:\r\n        errors.code = null;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_CODE_SEND_FAILURE:\r\n        switch (action.error) {\r\n          case 'PHONE_CODE_INVALID':\r\n          case 'EMAIL_CODE_INVALID':\r\n            errors.code = this.intl.messages['login.errors.codeInvalid'];\r\n            break;\r\n          case 'PHONE_CODE_EXPIRED':\r\n            errors.code = this.intl.messages['login.errors.codeExpired'];\r\n            break;\r\n          default:\r\n            errors.code = action.error;\r\n        }\r\n        isCodeSended = false;\r\n        this.__emitChange();\r\n        break;\r\n\r\n      case ActionTypes.AUTH_SIGNUP_START:\r\n        step = AuthSteps.NAME_WAIT;\r\n        this.__emitChange();\r\n        break;\r\n\r\n      case ActionTypes.AUTH_SIGNUP:\r\n        isSignupStarted = true;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_SIGNUP_SUCCESS:\r\n        errors.signup = null;\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_SIGNUP_FAILURE:\r\n        switch (action.error) {\r\n          case 'NAME_INVALID':\r\n            errors.signup = this.intl.messages['login.errors.nameInvalid'];\r\n            break;\r\n          default:\r\n            errors.signup = action.error;\r\n        }\r\n        isSignupStarted = false;\r\n        this.__emitChange();\r\n        break;\r\n\r\n      case ActionTypes.AUTH_RESTART:\r\n        this.resetStore();\r\n        this.__emitChange();\r\n        break;\r\n\r\n      case ActionTypes.AUTH_SET_LOGGED_IN:\r\n        myUid = ActorClient.getUid();\r\n        this.__emitChange();\r\n        break;\r\n      case ActionTypes.AUTH_SET_LOGGED_OUT:\r\n        localStorage.clear();\r\n        location.reload();\r\n        break;\r\n      case ActionTypes.AUTH_TOOGLE_LOGIN_TYPE:\r\n          if(loginType == 1){\r\n            loginType = 2;\r\n          }else{\r\n            loginType = 1;\r\n          }\r\n          this.__emitChange();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n}\r\n\r\nexport default new LoginStore(Dispatcher);\r\n"]}