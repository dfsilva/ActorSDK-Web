{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":["DialogStore","getInitialState","peer","dialogs","getDialogs","getState","getCurrentPeer","isMember","type","GROUP","group","getGroup","id","members","length","isFavorite","favoriteDialogs","key","shorts","dialog","reduce","state","action","DIALOGS_CHANGED","BIND_DIALOG_PEER","UNBIND_DIALOG_PEER"],"mappings":";;;;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;+eARA;;;;IAUMA,W;;;;;;;;;wBACJC,e,8BAAkB;AAChB,WAAO;AACLC,YAAM,IADD;AAELC,eAAS;AAFJ,KAAP;AAID,G;;wBAEDC,U,yBAAa;AAAA,oBACS,KAAKC,QAAL,EADT;AAAA,QACHF,OADG,aACHA,OADG;;AAEX,WAAOA,OAAP;AACD,G;;wBAEDG,c,6BAAiB;AAAA,qBACE,KAAKD,QAAL,EADF;AAAA,QACPH,IADO,cACPA,IADO;;AAEf,WAAOA,IAAP;AACD,G;;wBAEDK,Q,uBAAW;AACT,QAAML,OAAO,KAAKI,cAAL,EAAb;AACA,QAAIJ,QAAQA,KAAKM,IAAL,KAAc,6BAAUC,KAApC,EAA2C;AACzC,UAAMC,QAAQ,sBAAYC,QAAZ,CAAqBT,KAAKU,EAA1B,CAAd;AACA,aAAOF,SAASA,MAAMG,OAAN,CAAcC,MAAd,KAAyB,CAAzC;AACD;AACD,WAAO,IAAP;AACD,G;;wBAEDC,U,uBAAWH,E,EAAI;AACb,QAAMI,kBAAkB,kBAAK,KAAKZ,UAAL,EAAL,EAAwB,EAAEa,KAAK,YAAP,EAAxB,CAAxB;AACA,QAAI,CAACD,eAAL,EAAsB,OAAO,KAAP;;AAEtB,WAAO,kBAAKA,gBAAgBE,MAArB,EAA6B,UAACC,MAAD;AAAA,aAAYA,OAAOjB,IAAP,CAAYA,IAAZ,CAAiBU,EAAjB,KAAwBA,EAApC;AAAA,KAA7B,CAAP;AACD,G;;wBAEDQ,M,mBAAOC,K,EAAOC,M,EAAQ;AACpB,YAAQA,OAAOd,IAAf;AACE,WAAK,+BAAYe,eAAjB;AACE,4BACKF,KADL;AAEElB,mBAASmB,OAAOnB;AAFlB;;AAKF,WAAK,+BAAYqB,gBAAjB;AACE,4BACKH,KADL;AAEEnB,gBAAMoB,OAAOpB;AAFf;;AAKF,WAAK,+BAAYuB,kBAAjB;AACE,4BACKJ,KADL;AAEEnB,gBAAM;AAFR;;AAKF;AACE,eAAOmB,KAAP;AApBJ;AAsBD,G;;;;;kBAGY,IAAIrB,WAAJ,8B","file":"DialogStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { find, some } from 'lodash';\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\r\nimport ActorClient from '../utils/ActorClient';\r\n\r\nclass DialogStore extends ReduceStore {\r\n  getInitialState() {\r\n    return {\r\n      peer: null,\r\n      dialogs: []\r\n    };\r\n  }\r\n\r\n  getDialogs() {\r\n    const { dialogs } = this.getState();\r\n    return dialogs;\r\n  }\r\n\r\n  getCurrentPeer() {\r\n    const { peer } = this.getState();\r\n    return peer;\r\n  }\r\n\r\n  isMember() {\r\n    const peer = this.getCurrentPeer();\r\n    if (peer && peer.type === PeerTypes.GROUP) {\r\n      const group = ActorClient.getGroup(peer.id);\r\n      return group && group.members.length !== 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isFavorite(id) {\r\n    const favoriteDialogs = find(this.getDialogs(), { key: 'favourites' });\r\n    if (!favoriteDialogs) return false;\r\n\r\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\r\n  }\r\n\r\n  reduce(state, action) {\r\n    switch (action.type) {\r\n      case ActionTypes.DIALOGS_CHANGED:\r\n        return {\r\n          ...state,\r\n          dialogs: action.dialogs\r\n        };\r\n\r\n      case ActionTypes.BIND_DIALOG_PEER:\r\n        return {\r\n          ...state,\r\n          peer: action.peer\r\n        };\r\n\r\n      case ActionTypes.UNBIND_DIALOG_PEER:\r\n        return {\r\n          ...state,\r\n          peer: null\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new DialogStore(Dispatcher);\r\n"]}