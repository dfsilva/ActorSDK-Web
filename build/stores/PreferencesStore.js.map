{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":["PreferencesStore","getInitialState","sessions","currentTab","GENERAL","terminateState","reduce","state","action","type","PREFERENCES_SESSION_LOAD_SUCCESS","response","PREFERENCES_MODAL_HIDE","PREFERENCES_CHANGE_TAB","tab","PREFERENCES_SESSION_TERMINATE","id","PROCESSING","PREFERENCES_SESSION_TERMINATE_SUCCESS","PREFERENCES_SESSION_TERMINATE_ERROR","FAILURE","isSendByEnterEnabled","isGroupsNotificationsEnabled","isOnlyMentionNotifications","isSoundEffectsEnabled","isShowNotificationsTextEnabled","isAnimationAutoPlayEnabled","getSessions","getState","getCurrentTab","getTerminateState"],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;AAEA;;;;;;;;;;+eARA;;;;IAUMA,gB;;;;;;;;;6BACJC,e,8BAAkB;AAChB,WAAO;AACLC,gBAAU,EADL;AAELC,kBAAY,uCAAoBC,OAF3B;AAGLC,sBAAgB;AAHX,KAAP;AAKD,G;;6BAEDC,M,mBAAOC,K,EAAOC,M,EAAQ;AACpB,YAAOA,OAAOC,IAAd;AACE,WAAK,+BAAYC,gCAAjB;AACE,4BACKH,KADL;AAEEL,oBAAUM,OAAOG;AAFnB;AAIF,WAAK,+BAAYC,sBAAjB;AACE,eAAO,KAAKX,eAAL,EAAP;;AAEF,WAAK,+BAAYY,sBAAjB;AACE,4BACKN,KADL;AAEEJ,sBAAYK,OAAOM;AAFrB;;AAKF,WAAK,+BAAYC,6BAAjB;AACER,cAAMF,cAAN,CAAqBG,OAAOQ,EAA5B,IAAkC,qCAAkBC,UAApD;AACA,eAAOV,KAAP;AACF,WAAK,+BAAYW,qCAAjB;AACE,eAAOX,MAAMF,cAAN,CAAqBG,OAAOQ,EAA5B,CAAP;AACA,eAAOT,KAAP;AACF,WAAK,+BAAYY,mCAAjB;AACEZ,cAAMF,cAAN,CAAqBG,OAAOQ,EAA5B,IAAkC,qCAAkBI,OAApD;AACA,eAAOb,KAAP;;AAEF;AACE,eAAOA,KAAP;AA1BJ;AA4BD,G;;6BAEDc,oB,mCAAuB;AACrB,WAAO,sBAAYA,oBAAZ,EAAP;AACD,G;;6BAEDC,4B,2CAA+B;AAC7B,WAAO,sBAAYA,4BAAZ,EAAP;AACD,G;;6BAEDC,0B,yCAA6B;AAC3B,WAAO,sBAAYA,0BAAZ,EAAP;AACD,G;;6BAEDC,qB,oCAAwB;AACtB,WAAO,sBAAYA,qBAAZ,EAAP;AACD,G;;6BAEDC,8B,6CAAiC;AAC/B,WAAO,sBAAYA,8BAAZ,EAAP;AACD,G;;6BAEDC,0B,yCAA6B;AAC3B,WAAO,sBAAYA,0BAAZ,EAAP;AACD,G;;6BAEDC,W,0BAAc;AACZ,WAAO,KAAKC,QAAL,GAAgB1B,QAAvB;AACD,G;;6BAED2B,a,4BAAgB;AACd,WAAO,KAAKD,QAAL,GAAgBzB,UAAvB;AACD,G;;6BAED2B,iB,gCAAoB;AAClB,WAAO,KAAKF,QAAL,GAAgBvB,cAAvB;AACD,G;;;;;kBAGY,IAAIL,gBAAJ,8B","file":"PreferencesStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, AsyncActionStates, PreferencesTabTypes } from '../constants/ActorAppConstants';\r\n\r\nimport ActorClient from '../utils/ActorClient';\r\n\r\nclass PreferencesStore extends ReduceStore {\r\n  getInitialState() {\r\n    return {\r\n      sessions: [],\r\n      currentTab: PreferencesTabTypes.GENERAL,\r\n      terminateState: {}\r\n    }\r\n  }\r\n\r\n  reduce(state, action) {\r\n    switch(action.type) {\r\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\r\n        return {\r\n          ...state,\r\n          sessions: action.response\r\n        }\r\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\r\n        return this.getInitialState();\r\n\r\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\r\n        return {\r\n          ...state,\r\n          currentTab: action.tab\r\n        }\r\n\r\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\r\n        state.terminateState[action.id] = AsyncActionStates.PROCESSING;\r\n        return state;\r\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\r\n        delete state.terminateState[action.id];\r\n        return state;\r\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\r\n        state.terminateState[action.id] = AsyncActionStates.FAILURE;\r\n        return state;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n  isSendByEnterEnabled() {\r\n    return ActorClient.isSendByEnterEnabled();\r\n  }\r\n\r\n  isGroupsNotificationsEnabled() {\r\n    return ActorClient.isGroupsNotificationsEnabled();\r\n  }\r\n\r\n  isOnlyMentionNotifications() {\r\n    return ActorClient.isOnlyMentionNotifications();\r\n  }\r\n\r\n  isSoundEffectsEnabled() {\r\n    return ActorClient.isSoundEffectsEnabled();\r\n  }\r\n\r\n  isShowNotificationsTextEnabled() {\r\n    return ActorClient.isShowNotificationsTextEnabled();\r\n  }\r\n\r\n  isAnimationAutoPlayEnabled() {\r\n    return ActorClient.isAnimationAutoPlayEnabled();\r\n  }\r\n\r\n  getSessions() {\r\n    return this.getState().sessions;\r\n  }\r\n\r\n  getCurrentTab() {\r\n    return this.getState().currentTab;\r\n  }\r\n\r\n  getTerminateState() {\r\n    return this.getState().terminateState;\r\n  }\r\n}\r\n\r\nexport default new PreferencesStore(Dispatcher);\r\n"]}