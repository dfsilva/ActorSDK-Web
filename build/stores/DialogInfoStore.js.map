{"version":3,"sources":["../../src/stores/DialogInfoStore.js"],"names":["getPeer","peer","type","GROUP","getGroup","id","getUser","DialogInfoStore","getInitialState","__isStarted","reduce","state","action","SELECT_DIALOG_PEER","info","isStarted","DIALOG_INFO_CHANGED","MESSAGES_CHANGED","messages","length"],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;AACA;;;;;;;;;;+eAPA;;;;AASA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIA,KAAKC,IAAL,KAAc,6BAAUC,KAA5B,EAAmC;AACjC,WAAO,sBAAYC,QAAZ,CAAqBH,KAAKI,EAA1B,CAAP;AACD;;AAED,SAAO,sBAAYC,OAAZ,CAAoBL,KAAKI,EAAzB,CAAP;AACD;;IAEKE,e;;;;;;;;;4BACJC,e,8BAAkB;AAChB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,WAAO,IAAP;AACD,G;;4BAEDC,M,mBAAOC,K,EAAOC,M,EAAQ;AACpB,YAAQA,OAAOV,IAAf;AACE,WAAK,+BAAYW,kBAAjB;AACE,YAAMC,OAAOd,QAAQY,OAAOX,IAAf,CAAb;;AAEA,4BACKa,IADL;AAEEC,qBAAW,KAAKN;AAFlB;;AAKF,WAAK,+BAAYO,mBAAjB;AACE,4BACKJ,OAAOE,IADZ;AAEEC,qBAAW,KAAKN;AAFlB;;AAKF,WAAK,+BAAYQ,gBAAjB;AACE,aAAKR,WAAL,GAAmBG,OAAOM,QAAP,IAAmBN,OAAOM,QAAP,CAAgBC,MAAhB,GAAyB,CAA/D;AACA,YAAIR,KAAJ,EAAW;AACT,8BACKA,KADL;AAEEI,uBAAW,KAAKN;AAFlB;AAID;;AAED,eAAOE,KAAP;;AAEF;AACE,eAAOA,KAAP;AA3BJ;AA6BD,G;;;;;kBAGY,IAAIJ,eAAJ,8B","file":"DialogInfoStore.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { ReduceStore } from 'flux/utils';\r\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\r\nimport ActorClient from '../utils/ActorClient';\r\n\r\nfunction getPeer(peer) {\r\n  if (peer.type === PeerTypes.GROUP) {\r\n    return ActorClient.getGroup(peer.id);\r\n  }\r\n\r\n  return ActorClient.getUser(peer.id);\r\n}\r\n\r\nclass DialogInfoStore extends ReduceStore {\r\n  getInitialState() {\r\n    // Temporary workaround while isStarted isn't correct\r\n    this.__isStarted = false;\r\n    return null;\r\n  }\r\n\r\n  reduce(state, action) {\r\n    switch (action.type) {\r\n      case ActionTypes.SELECT_DIALOG_PEER:\r\n        const info = getPeer(action.peer);\r\n\r\n        return {\r\n          ...info,\r\n          isStarted: this.__isStarted\r\n        };\r\n\r\n      case ActionTypes.DIALOG_INFO_CHANGED:\r\n        return {\r\n          ...action.info,\r\n          isStarted: this.__isStarted\r\n        };\r\n\r\n      case ActionTypes.MESSAGES_CHANGED:\r\n        this.__isStarted = action.messages && action.messages.length > 0;\r\n        if (state) {\r\n          return {\r\n            ...state,\r\n            isStarted: this.__isStarted\r\n          };\r\n        }\r\n\r\n        return state;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new DialogInfoStore(Dispatcher);\r\n"]}