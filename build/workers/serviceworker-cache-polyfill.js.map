{"version":3,"sources":["../../src/workers/serviceworker-cache-polyfill.js"],"names":["Cache","prototype","add","request","addAll","requests","cache","NetworkError","message","name","code","Object","create","Error","Promise","resolve","then","arguments","length","TypeError","map","Request","String","all","scheme","URL","url","protocol","fetch","clone","responses","response","i","put","undefined"],"mappings":";;AAAA,IAAI,CAACA,MAAMC,SAAN,CAAgBC,GAArB,EAA0B;AACxBF,QAAMC,SAAN,CAAgBC,GAAhB,GAAsB,SAASA,GAAT,CAAaC,OAAb,EAAsB;AAC1C,WAAO,KAAKC,MAAL,CAAY,CAACD,OAAD,CAAZ,CAAP;AACD,GAFD;AAGD;;AAED,IAAI,CAACH,MAAMC,SAAN,CAAgBG,MAArB,EAA6B;AAC3BJ,QAAMC,SAAN,CAAgBG,MAAhB,GAAyB,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;AACjD,QAAIC,QAAQ,IAAZ;;AAEA;AACA,aAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,WAAKC,IAAL,GAAY,cAAZ;AACA,WAAKC,IAAL,GAAY,EAAZ;AACA,WAAKF,OAAL,GAAeA,OAAf;AACD;AACDD,iBAAaN,SAAb,GAAyBU,OAAOC,MAAP,CAAcC,MAAMZ,SAApB,CAAzB;;AAEA,WAAOa,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACvC,UAAIC,UAAUC,MAAV,GAAmB,CAAvB,EAA0B,MAAM,IAAIC,SAAJ,EAAN;;AAE1Bd,iBAAWA,SAASe,GAAT,CAAa,UAASjB,OAAT,EAAkB;AACxC,YAAIA,mBAAmBkB,OAAvB,EAAgC;AAC9B,iBAAOlB,OAAP;AACD,SAFD,MAGK;AACH,iBAAOmB,OAAOnB,OAAP,CAAP,CADG,CACqB;AACzB;AACF,OAPU,CAAX;;AASA,aAAOW,QAAQS,GAAR,CACLlB,SAASe,GAAT,CAAa,UAASjB,OAAT,EAAkB;AAC7B,YAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,oBAAU,IAAIkB,OAAJ,CAAYlB,OAAZ,CAAV;AACD;;AAED,YAAIqB,SAAS,IAAIC,GAAJ,CAAQtB,QAAQuB,GAAhB,EAAqBC,QAAlC;;AAEA,YAAIH,WAAW,OAAX,IAAsBA,WAAW,QAArC,EAA+C;AAC7C,gBAAM,IAAIjB,YAAJ,CAAiB,gBAAjB,CAAN;AACD;;AAED,eAAOqB,MAAMzB,QAAQ0B,KAAR,EAAN,CAAP;AACD,OAZD,CADK,CAAP;AAeD,KA3BM,EA2BJb,IA3BI,CA2BC,UAASc,SAAT,EAAoB;AAC1B;AACA;AACA,aAAOhB,QAAQS,GAAR,CACLO,UAAUV,GAAV,CAAc,UAASW,QAAT,EAAmBC,CAAnB,EAAsB;AAClC,eAAO1B,MAAM2B,GAAN,CAAU5B,SAAS2B,CAAT,CAAV,EAAuBD,QAAvB,CAAP;AACD,OAFD,CADK,CAAP;AAKD,KAnCM,EAmCJf,IAnCI,CAmCC,YAAW;AACjB,aAAOkB,SAAP;AACD,KArCM,CAAP;AAsCD,GAjDD;AAkDD","file":"serviceworker-cache-polyfill.js","sourcesContent":["if (!Cache.prototype.add) {\r\n  Cache.prototype.add = function add(request) {\r\n    return this.addAll([request]);\r\n  };\r\n}\r\n\r\nif (!Cache.prototype.addAll) {\r\n  Cache.prototype.addAll = function addAll(requests) {\r\n    var cache = this;\r\n\r\n    // Since DOMExceptions are not constructable:\r\n    function NetworkError(message) {\r\n      this.name = 'NetworkError';\r\n      this.code = 19;\r\n      this.message = message;\r\n    }\r\n    NetworkError.prototype = Object.create(Error.prototype);\r\n\r\n    return Promise.resolve().then(function() {\r\n      if (arguments.length < 1) throw new TypeError();\r\n\r\n      requests = requests.map(function(request) {\r\n        if (request instanceof Request) {\r\n          return request;\r\n        }\r\n        else {\r\n          return String(request); // may throw TypeError\r\n        }\r\n      });\r\n\r\n      return Promise.all(\r\n        requests.map(function(request) {\r\n          if (typeof request === 'string') {\r\n            request = new Request(request);\r\n          }\r\n\r\n          var scheme = new URL(request.url).protocol;\r\n\r\n          if (scheme !== 'http:' && scheme !== 'https:') {\r\n            throw new NetworkError('Invalid scheme');\r\n          }\r\n\r\n          return fetch(request.clone());\r\n        })\r\n      );\r\n    }).then(function(responses) {\r\n      // TODO: check that requests don't overwrite one another\r\n      // (don't think this is possible to polyfill due to opaque responses)\r\n      return Promise.all(\r\n        responses.map(function(response, i) {\r\n          return cache.put(requests[i], response);\r\n        })\r\n      );\r\n    }).then(function() {\r\n      return undefined;\r\n    });\r\n  };\r\n}\r\n"]}