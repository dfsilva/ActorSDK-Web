{"version":3,"sources":["../../src/actions/SearchMessagesActionCreators.js"],"names":["SearchMessagesActionCreators","findText","bind","maxWait","open","SEARCH_MESSAGES_SHOW","toggleAutoFocus","close","SEARCH_MESSAGES_HIDE","setQuery","query","SEARCH_MESSAGES_SET_QUERY","getState","peer","getCurrentPeer","findAllText","request","SEARCH_TEXT","success","SEARCH_TEXT_SUCCESS","failure","SEARCH_TEXT_ERROR"],"mappings":";;;;AAIA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;0JAVA;;;;IAYMA,4B;AACJ,0CAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,sBAAS,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAT,EAAmC,GAAnC,EAAwC,EAAEC,SAAS,GAAX,EAAxC,CAAhB;AACD;;yCAEDC,I,mBAAO;AACL,sCAAS,+BAAYC,oBAArB;AACA,oCAAsBC,eAAtB,CAAsC,KAAtC;AACD,G;;yCAEDC,K,oBAAQ;AACN,sCAAS,+BAAYC,oBAArB;AACA,oCAAsBF,eAAtB,CAAsC,IAAtC;AACD,G;;yCAEDG,Q,qBAASC,K,EAAO;AACd,sCAAS,+BAAYC,yBAArB,EAAgD,EAAED,YAAF,EAAhD;AACA,SAAKT,QAAL;AACD,G;;yCAEDA,Q,uBAAW;AAAA,gCACS,8BAAoBW,QAApB,EADT;AAAA,QACDF,KADC,yBACDA,KADC;;AAET,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,QAAMG,OAAO,sBAAYC,cAAZ,EAAb;AACA,2CAAc,sBAAYC,WAAZ,CAAwBF,IAAxB,EAA8BH,KAA9B,CAAd,EAAoD;AAClDM,eAAS,+BAAYC,WAD6B;AAElDC,eAAS,+BAAYC,mBAF6B;AAGlDC,eAAS,+BAAYC;AAH6B,KAApD,EAIG,EAAER,UAAF,EAAQH,YAAR,EAJH;AAKD,G;;;;;kBAGY,IAAIV,4BAAJ,E","file":"SearchMessagesActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { debounce } from 'lodash';\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport DialogStore from '../stores/DialogStore';\nimport SearchMessagesStore from '../stores/SearchMessagesStore';\nimport ComposeActionCreators from './ComposeActionCreators';\n\nclass SearchMessagesActionCreators {\n  constructor() {\n    this.findText = debounce(this.findText.bind(this), 100, { maxWait: 300 });\n  }\n\n  open() {\n    dispatch(ActionTypes.SEARCH_MESSAGES_SHOW);\n    ComposeActionCreators.toggleAutoFocus(false);\n  }\n\n  close() {\n    dispatch(ActionTypes.SEARCH_MESSAGES_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  }\n\n  setQuery(query) {\n    dispatch(ActionTypes.SEARCH_MESSAGES_SET_QUERY, { query });\n    this.findText();\n  }\n\n  findText() {\n    const { query } = SearchMessagesStore.getState();\n    if (!query) {\n      return;\n    }\n\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllText(peer, query), {\n      request: ActionTypes.SEARCH_TEXT,\n      success: ActionTypes.SEARCH_TEXT_SUCCESS,\n      failure: ActionTypes.SEARCH_TEXT_ERROR\n    }, { peer, query });\n  }\n}\n\nexport default new SearchMessagesActionCreators();\n"]}