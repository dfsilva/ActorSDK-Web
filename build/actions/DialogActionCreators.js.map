{"version":3,"sources":["../../src/actions/DialogActionCreators.js"],"names":["DialogActionCreators","setDialogs","dialogs","DIALOGS_CHANGED","selectDialogPeerUser","uid","getUid","console","warn","push","peerToString","getUserPeer","selectDialogPeer","peer","currentPeer","getCurrentPeer","saveDraft","UNBIND_DIALOG_PEER","onConversationClosed","removeBindings","BIND_DIALOG_PEER","onConversationOpen","loadDraft","bindings","bindMessages","setMessages","bindTyping","setTyping","type","USER","bindUser","id","setDialogInfo","bindUserOnline","setUserOnline","GROUP","bindGroup","bindGroupOnline","setGroupOnline","getIntegrationToken","setBindings","onDialogsEnd","onChatEnd","leaveGroup","gid","request","GROUP_LEAVE","success","GROUP_LEAVE_SUCCESS","failure","GROUP_LEAVE_ERROR","deleteChat","GROUP_DELETE","GROUP_DELETE_SUCCESS","GROUP_DELETE_ERROR","then","clearChat","GROUP_CLEAR","GROUP_CLEAR_SUCCESS","GROUP_CLEAR_ERROR","hideChat","GROUP_HIDE","GROUP_HIDE_SUCCESS","GROUP_HIDE_ERROR","blockUser","debug","loadMoreMessages","isAllRendered","MESSAGES_LOAD_MORE"],"mappings":"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","file":"DialogActionCreators.js","sourcesContent":["/*\r\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\r\n */\r\n\r\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\r\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\r\nimport history from '../utils/history';\r\nimport ActorClient from '../utils/ActorClient';\r\nimport PeerUtils from '../utils/PeerUtils';\r\n\r\nimport ActionCreators from './ActionCreators';\r\nimport MessageActionCreators from './MessageActionCreators';\r\nimport TypingActionCreators from './TypingActionCreators';\r\nimport DialogInfoActionCreators from './DialogInfoActionCreators';\r\nimport OnlineActionCreators from './OnlineActionCreators';\r\nimport GroupProfileActionCreators from './GroupProfileActionCreators';\r\nimport DraftActionCreators from './DraftActionCreators';\r\n\r\nimport DialogStore from '../stores/DialogStore';\r\nimport MessageStore from '../stores/MessageStore';\r\n\r\nclass DialogActionCreators extends ActionCreators {\r\n  setDialogs(dialogs) {\r\n    dispatch(ActionTypes.DIALOGS_CHANGED, { dialogs });\r\n  }\r\n\r\n  selectDialogPeerUser(uid) {\r\n    if (uid === ActorClient.getUid()) {\r\n      console.warn('You can\\'t chat with yourself');\r\n    } else {\r\n      history.push(`/im/${PeerUtils.peerToString(ActorClient.getUserPeer(uid))}`);\r\n    }\r\n  }\r\n\r\n  selectDialogPeer(peer) {\r\n    const currentPeer = DialogStore.getCurrentPeer();\r\n\r\n    if (currentPeer) {\r\n      DraftActionCreators.saveDraft(currentPeer);\r\n      dispatch(ActionTypes.UNBIND_DIALOG_PEER, { peer: currentPeer });\r\n      ActorClient.onConversationClosed(currentPeer);\r\n\r\n      this.removeBindings('peer');\r\n    }\r\n\r\n    if (!peer) {\r\n      return;\r\n    }\r\n\r\n    dispatch(ActionTypes.BIND_DIALOG_PEER, { peer });\r\n    ActorClient.onConversationOpen(peer);\r\n    DraftActionCreators.loadDraft(peer);\r\n\r\n    const bindings = [\r\n      ActorClient.bindMessages(peer, MessageActionCreators.setMessages),\r\n      ActorClient.bindTyping(peer, TypingActionCreators.setTyping)\r\n    ];\r\n\r\n    switch (peer.type) {\r\n      case PeerTypes.USER:\r\n        bindings.push(\r\n          ActorClient.bindUser(peer.id, DialogInfoActionCreators.setDialogInfo),\r\n          ActorClient.bindUserOnline(peer.id, OnlineActionCreators.setUserOnline)\r\n        );\r\n        break;\r\n      case PeerTypes.GROUP:\r\n        bindings.push(\r\n          ActorClient.bindGroup(peer.id, DialogInfoActionCreators.setDialogInfo),\r\n          ActorClient.bindGroupOnline(peer.id, OnlineActionCreators.setGroupOnline)\r\n        );\r\n        GroupProfileActionCreators.getIntegrationToken(peer.id);\r\n        break;\r\n    }\r\n\r\n    this.setBindings('peer', bindings);\r\n  }\r\n\r\n  onDialogsEnd() {\r\n    ActorClient.onDialogsEnd();\r\n  }\r\n\r\n  onChatEnd(peer) {\r\n    ActorClient.onChatEnd(peer);\r\n  }\r\n\r\n  leaveGroup(gid) {\r\n    dispatchAsync(ActorClient.leaveGroup(gid), {\r\n      request: ActionTypes.GROUP_LEAVE,\r\n      success: ActionTypes.GROUP_LEAVE_SUCCESS,\r\n      failure: ActionTypes.GROUP_LEAVE_ERROR\r\n    }, { gid });\r\n  }\r\n\r\n  deleteChat(peer) {\r\n    const gid = peer.id;\r\n    const leaveGroup = () => dispatchAsync(ActorClient.leaveGroup(gid), {\r\n      request: ActionTypes.GROUP_LEAVE,\r\n      success: ActionTypes.GROUP_LEAVE_SUCCESS,\r\n      failure: ActionTypes.GROUP_LEAVE_ERROR\r\n    }, { gid });\r\n    const deleteChat = () => dispatchAsync(ActorClient.deleteChat(peer), {\r\n      request: ActionTypes.GROUP_DELETE,\r\n      success: ActionTypes.GROUP_DELETE_SUCCESS,\r\n      failure: ActionTypes.GROUP_DELETE_ERROR\r\n    }, { peer });\r\n\r\n    switch (peer.type) {\r\n      case PeerTypes.USER:\r\n        deleteChat();\r\n        break;\r\n      case PeerTypes.GROUP:\r\n        leaveGroup()\r\n          .then(deleteChat);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  clearChat(peer) {\r\n    dispatchAsync(ActorClient.clearChat(peer), {\r\n      request: ActionTypes.GROUP_CLEAR,\r\n      success: ActionTypes.GROUP_CLEAR_SUCCESS,\r\n      failure: ActionTypes.GROUP_CLEAR_ERROR\r\n    }, { peer });\r\n  }\r\n\r\n  hideChat(peer) {\r\n    dispatchAsync(ActorClient.hideChat(peer), {\r\n      request: ActionTypes.GROUP_HIDE,\r\n      success: ActionTypes.GROUP_HIDE_SUCCESS,\r\n      failure: ActionTypes.GROUP_HIDE_ERROR\r\n    }, { peer });\r\n  }\r\n\r\n  blockUser(id) {\r\n    console.debug('Block user %s', id);\r\n  }\r\n\r\n  loadMoreMessages(peer) {\r\n    if (MessageStore.isAllRendered()) {\r\n      this.onChatEnd(peer);\r\n    } else {\r\n      dispatch(ActionTypes.MESSAGES_LOAD_MORE);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new DialogActionCreators();\r\n"]}