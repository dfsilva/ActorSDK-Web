{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":["isPeerUser","isPeerGroup","peerToString","peer","id","type","USER","GROUP","console","error","stringToPeer","str","charAt","parseInt","substring","getUserPeer","getGroupPeer","hasPeer","getUser","getGroup","e","equals","peer1","peer2","Boolean","isGroupBot","user","avatar","userName","title"],"mappings":";;;QAwDgBA,U,GAAAA,U;QAIAC,W,GAAAA,W;;AA5DhB;;AAEA;;;;;;kBAEe;AACbC,cADa,wBACAC,IADA,EACM;AAAA,QACTC,EADS,GACID,IADJ,CACTC,EADS;AAAA,QACLC,IADK,GACIF,IADJ,CACLE,IADK;;;AAGjB,YAAQA,IAAR;AACE,WAAK,6BAAUC,IAAf;AACE,eAAO,oCAAiBA,IAAjB,GAAwBF,EAA/B;AACF,WAAK,6BAAUG,KAAf;AACE,eAAO,oCAAiBA,KAAjB,GAAyBH,EAAhC;AACF;AACEI,gBAAQC,KAAR,CAAc,yCAAd,EAAyDJ,IAAzD,EAA+DD,EAA/D;AANJ;AAQD,GAZY;AAcbM,cAda,wBAcAC,GAdA,EAcK;AAChB,QAAMN,OAAOM,IAAIC,MAAJ,CAAW,CAAX,CAAb;AACA,QAAMR,KAAKS,SAASF,IAAIG,SAAJ,CAAc,CAAd,CAAT,EAA2B,EAA3B,CAAX;;AAEA,YAAQT,IAAR;AACE,WAAK,oCAAiBC,IAAtB;AACE,eAAO,sBAAYS,WAAZ,CAAwBX,EAAxB,CAAP;AACF,WAAK,oCAAiBG,KAAtB;AACE,eAAO,sBAAYS,YAAZ,CAAyBZ,EAAzB,CAAP;AACF;AACAI,gBAAQC,KAAR,CAAc,yCAAd,EAAyDJ,IAAzD,EAA+DD,EAA/D;AANF;AAQD,GA1BY;AA4Bba,SA5Ba,mBA4BLd,IA5BK,EA4BC;AACZ,QAAI;AACF,cAAQA,KAAKE,IAAb;AACE,aAAK,6BAAUC,IAAf;AACE,iBAAO,sBAAYY,OAAZ,CAAoBf,KAAKC,EAAzB,CAAP;AACF,aAAK,6BAAUG,KAAf;AACE,iBAAO,sBAAYY,QAAZ,CAAqBhB,KAAKC,EAA1B,CAAP;AAJJ;AAMD,KAPD,CAOE,OAAOgB,CAAP,EAAU;AACVZ,cAAQC,KAAR,CAAcW,CAAd;AACD;;AAED,WAAO,KAAP;AACD,GAzCY;AA2CbC,QA3Ca,kBA2CNC,KA3CM,EA2CCC,KA3CD,EA2CQ;AACnB,WAAOC,QAAQF,SAASC,KAAjB,KAA2BD,MAAMlB,EAAN,KAAamB,MAAMnB,EAA9C,IAAoDkB,MAAMjB,IAAN,KAAekB,MAAMlB,IAAhF;AACD,GA7CY;AA+CboB,YA/Ca,sBA+CFC,IA/CE,EA+CI;AACf,WAAO,CAACA,KAAKC,MAAN,IAAgB,CAACD,KAAKE,QAAtB,IAAkCF,KAAKG,KAAL,KAAe,KAAxD;AACD;AAjDY,C;AAoDR,SAAS7B,UAAT,CAAoBG,IAApB,EAA0B;AAC/B,SAAOA,KAAKE,IAAL,KAAc,6BAAUC,IAA/B;AACD;;AAEM,SAASL,WAAT,CAAqBE,IAArB,EAA2B;AAChC,SAAOA,KAAKE,IAAL,KAAc,6BAAUE,KAA/B;AACD","file":"PeerUtils.js","sourcesContent":["import { PeerTypes, PeerTypePrefixes } from '../constants/ActorAppConstants';\r\n\r\nimport ActorClient from './ActorClient';\r\n\r\nexport default {\r\n  peerToString(peer) {\r\n    const { id, type } = peer;\r\n\r\n    switch (type) {\r\n      case PeerTypes.USER:\r\n        return PeerTypePrefixes.USER + id;\r\n      case PeerTypes.GROUP:\r\n        return PeerTypePrefixes.GROUP + id;\r\n      default:\r\n        console.error('Unknown peer type: { type: %s, id: %s }', type, id);\r\n    }\r\n  },\r\n\r\n  stringToPeer(str) {\r\n    const type = str.charAt(0);\r\n    const id = parseInt(str.substring(1), 10);\r\n\r\n    switch (type) {\r\n      case PeerTypePrefixes.USER:\r\n        return ActorClient.getUserPeer(id);\r\n      case PeerTypePrefixes.GROUP:\r\n        return ActorClient.getGroupPeer(id);\r\n      default:\r\n      console.error('Unknown peer type: { type: %s, id: %s }', type, id);\r\n    }\r\n  },\r\n\r\n  hasPeer(peer) {\r\n    try {\r\n      switch (peer.type) {\r\n        case PeerTypes.USER:\r\n          return ActorClient.getUser(peer.id);\r\n        case PeerTypes.GROUP:\r\n          return ActorClient.getGroup(peer.id);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  equals(peer1, peer2) {\r\n    return Boolean(peer1 && peer2) && peer1.id === peer2.id && peer1.type === peer2.type;\r\n  },\r\n\r\n  isGroupBot(user) {\r\n    return !user.avatar && !user.userName && user.title === 'Bot';\r\n  }\r\n};\r\n\r\nexport function isPeerUser(peer) {\r\n  return peer.type === PeerTypes.USER;\r\n}\r\n\r\nexport function isPeerGroup(peer) {\r\n  return peer.type === PeerTypes.GROUP;\r\n}\r\n"]}