{"version":3,"sources":["../../src/utils/MessageUtils.js"],"names":["getMessageState","prepareTextMessage","quoteMessage","isLastMessageMine","getFirstUnreadMessageIndex","findLastEditableMessage","isMessageSender","message","uid","sender","peer","id","receiveDate","readDate","UNKNOWN","isOut","state","SENT","sortDate","READ","RECEIVED","text","change_replace_mode","replace_colons","trim","split","map","line","join","messages","lastMessage","length","index","i","MAX_EDIT_TIME","now","Date","minDate","console","debug","content"],"mappings":";;;QAOgBA,e,GAAAA,e;QAkBAC,kB,GAAAA,kB;QAKAC,Y,GAAAA,Y;QAQAC,iB,GAAAA,iB;QAKAC,0B,GAAAA,0B;QAoBAC,uB,GAAAA,uB;;AA/DhB;;AACA;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuC;AACrC,SAAOA,QAAQD,QAAQE,MAAR,CAAeC,IAAf,CAAoBC,EAAnC;AACD;;AAEM,SAASX,eAAT,CAAyBO,OAAzB,EAAkCC,GAAlC,EAAuCI,WAAvC,EAAoDC,QAApD,EAA8D;AACnE,MAAIN,QAAQE,MAAR,CAAeC,IAAf,CAAoBC,EAApB,KAA2BH,GAA/B,EAAoC;AAClC,WAAO,iCAAcM,OAArB;AACD;;AAED,MAAIP,QAAQQ,KAAR,IAAiBR,QAAQS,KAAR,KAAkB,iCAAcC,IAArD,EAA2D;AACzD,QAAIV,QAAQW,QAAR,IAAoBL,QAAxB,EAAkC;AAChC,aAAO,iCAAcM,IAArB;AACD;;AAED,QAAIZ,QAAQW,QAAR,IAAoBN,WAAxB,EAAqC;AACnC,aAAO,iCAAcQ,QAArB;AACD;AACF;;AAED,SAAOb,QAAQS,KAAf;AACD;;AAEM,SAASf,kBAAT,CAA4BoB,IAA5B,EAAkC;AACvC,oBAAMC,mBAAN,CAA0B,SAA1B;AACA,SAAO,kBAAMC,cAAN,CAAqBF,IAArB,CAAP;AACD;;AAEM,SAASnB,YAAT,CAAsBmB,IAAtB,EAA4B;AACjC,SAAOA,KACJG,IADI,GAEJC,KAFI,CAEE,IAFF,EAGJC,GAHI,CAGA,UAACC,IAAD;AAAA,kBAAeA,IAAf;AAAA,GAHA,EAIJC,IAJI,CAIC,IAJD,CAAP;AAKD;;AAEM,SAASzB,iBAAT,CAA2BK,GAA3B,QAA8C;AAAA,MAAZqB,QAAY,QAAZA,QAAY;;AACnD,MAAMC,cAAcD,SAASA,SAASE,MAAT,GAAkB,CAA3B,CAApB;AACA,SAAOD,eAAexB,gBAAgBwB,WAAhB,EAA6BtB,GAA7B,CAAtB;AACD;;AAEM,SAASJ,0BAAT,CAAoCyB,QAApC,EAA8ChB,QAA9C,EAAwDL,GAAxD,EAA6D;AAClE,MAAIK,aAAa,CAAb,IAAkB,CAACgB,SAASE,MAAhC,EAAwC;AACtC,WAAO,CAAC,CAAR;AACD;;AAED,MAAIC,QAAQ,CAAC,CAAb;AACA,OAAK,IAAIC,IAAIJ,SAASE,MAAT,GAAkB,CAA/B,EAAkCE,KAAK,CAAvC,EAA0CA,GAA1C,EAA+C;AAC7C,QAAM1B,UAAUsB,SAASI,CAAT,CAAhB;AACA,QAAI1B,QAAQW,QAAR,IAAoBL,QAApB,IAAgCP,gBAAgBC,OAAhB,EAAyBC,GAAzB,CAApC,EAAmE;AACjE,aAAOwB,KAAP;AACD;;AAEDA,YAAQC,CAAR;AACD;;AAED;AACA,SAAOD,KAAP;AACD;;AAED,IAAME,gBAAgB,IAAI,EAA1B;AACO,SAAS7B,uBAAT,CAAiCwB,QAAjC,EAA2CrB,GAA3C,EAAgD;AACrD,MAAM2B,MAAMC,KAAKD,GAAL,KAAa,IAAzB;AACA,MAAME,UAAUF,MAAMD,aAAtB;;AAEAI,UAAQC,KAAR,CAAc,wBAAd,EAAwC,EAAEF,gBAAF,EAAxC;AACA,OAAK,IAAIJ,IAAIJ,SAASE,MAAT,GAAkB,CAA/B,EAAkCE,KAAK,CAAvC,EAA0CA,GAA1C,EAA+C;AAC7C,QAAM1B,UAAUsB,SAASI,CAAT,CAAhB;AACA,QAAI1B,QAAQW,QAAR,GAAmBmB,OAAvB,EAAgC;AAC9BC,cAAQC,KAAR,CAAc,mCAAd,EAAmD,EAAEhC,gBAAF,EAAnD;AACA,aAAO,IAAP;AACD;;AAED,QAAID,gBAAgBC,OAAhB,EAAyBC,GAAzB,CAAJ,EAAmC;AACjC,UAAID,QAAQiC,OAAR,CAAgBA,OAAhB,KAA4B,MAAhC,EAAwC;AACtCF,gBAAQC,KAAR,CAAc,wBAAd,EAAwC,EAAEhC,gBAAF,EAAxC;AACA,eAAOA,OAAP;AACD;;AAED+B,cAAQC,KAAR,CAAc,6BAAd,EAA6C,EAAEhC,gBAAF,EAA7C;;AAEA,aAAO,IAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","file":"MessageUtils.js","sourcesContent":["import { emoji } from './EmojiUtils';\r\nimport { MessageStates } from '../constants/ActorAppConstants';\r\n\r\nfunction isMessageSender(message, uid) {\r\n  return uid === message.sender.peer.id;\r\n}\r\n\r\nexport function getMessageState(message, uid, receiveDate, readDate) {\r\n  if (message.sender.peer.id !== uid) {\r\n    return MessageStates.UNKNOWN;\r\n  }\r\n\r\n  if (message.isOut && message.state === MessageStates.SENT) {\r\n    if (message.sortDate <= readDate) {\r\n      return MessageStates.READ;\r\n    }\r\n\r\n    if (message.sortDate <= receiveDate) {\r\n      return MessageStates.RECEIVED;\r\n    }\r\n  }\r\n\r\n  return message.state;\r\n}\r\n\r\nexport function prepareTextMessage(text) {\r\n  emoji.change_replace_mode('unified');\r\n  return emoji.replace_colons(text);\r\n}\r\n\r\nexport function quoteMessage(text) {\r\n  return text\r\n    .trim()\r\n    .split('\\n')\r\n    .map((line) => `> ${line}`)\r\n    .join('\\n');\r\n}\r\n\r\nexport function isLastMessageMine(uid, { messages }) {\r\n  const lastMessage = messages[messages.length - 1];\r\n  return lastMessage && isMessageSender(lastMessage, uid);\r\n}\r\n\r\nexport function getFirstUnreadMessageIndex(messages, readDate, uid) {\r\n  if (readDate === 0 || !messages.length) {\r\n    return -1;\r\n  }\r\n\r\n  let index = -1;\r\n  for (let i = messages.length - 1; i >= 0; i--) {\r\n    const message = messages[i];\r\n    if (message.sortDate <= readDate || isMessageSender(message, uid)) {\r\n      return index;\r\n    }\r\n\r\n    index = i;\r\n  }\r\n\r\n  // maybe unreachable\r\n  return index;\r\n}\r\n\r\nconst MAX_EDIT_TIME = 5 * 60;\r\nexport function findLastEditableMessage(messages, uid) {\r\n  const now = Date.now() / 1000;\r\n  const minDate = now - MAX_EDIT_TIME;\r\n\r\n  console.debug('Check editable message', { minDate });\r\n  for (let i = messages.length - 1; i >= 0; i--) {\r\n    const message = messages[i];\r\n    if (message.sortDate < minDate) {\r\n      console.debug('Message not editable due sortDate', { message });\r\n      return null;\r\n    }\r\n\r\n    if (isMessageSender(message, uid)) {\r\n      if (message.content.content === 'text') {\r\n        console.debug('Found editable message', { message });\r\n        return message;\r\n      }\r\n\r\n      console.debug('Last my message is not text', { message });\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n"]}